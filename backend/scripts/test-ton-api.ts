import axios from "axios";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

async function testTonApi() {
  const TON_API_KEY = process.env.TON_API_KEY;
  const TON_API_URL = "https://tonapi.io/v2";

  if (!TON_API_KEY) {
    console.error("‚ùå TON_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    console.log("üìù –î–æ–±–∞–≤—å—Ç–µ TON_API_KEY –≤ —Ñ–∞–π–ª .env");
    console.log("üîó –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://tonapi.io/");
    return;
  }

  console.log("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º TON API...");
  console.log(`üì° API URL: ${TON_API_URL}`);
  console.log(`üîê API Key: ${TON_API_KEY.substring(0, 10)}...`);

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
    console.log("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏...");
    const networkResponse = await axios.get(
      `${TON_API_URL}/blockchain/config`,
      {
        headers: {
          Authorization: `Bearer ${TON_API_KEY}`,
          Accept: "application/json",
        },
      }
    );

    console.log("‚úÖ –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞:", networkResponse.data);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    console.log("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
    const testAddress =
      "0:83dfd552e63729b471fc03dca9e96bfd0197afbe46e2112b5eb4f24868b51e0f";

    const transactionsResponse = await axios.get(
      `${TON_API_URL}/accounts/${testAddress}/events`,
      {
        headers: {
          Authorization: `Bearer ${TON_API_KEY}`,
          Accept: "application/json",
        },
        params: {
          limit: 5,
        },
      }
    );

    console.log("‚úÖ –°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã:", {
      count: transactionsResponse.data.events?.length || 0,
      sample: transactionsResponse.data.events?.[0] || "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π",
    });

    console.log("\nüéâ TON API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    console.log("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π");
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TON API:");

    if (error.response) {
      console.error("üì° –°—Ç–∞—Ç—É—Å:", error.response.status);
      console.error("üìÑ –û—Ç–≤–µ—Ç:", error.response.data);

      if (error.response.status === 401) {
        console.error("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ TON_API_KEY");
      } else if (error.response.status === 403) {
        console.error("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞");
      } else if (error.response.status === 429) {
        console.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
      }
    } else {
      console.error("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTonApi().catch(console.error);
