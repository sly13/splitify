import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testFriendsAPI() {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.findUnique({
      where: {
        telegramUserId: "123456789",
      },
      include: {
        friends: true,
      },
    });

    if (!testUser) {
      console.log("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", testUser);
    console.log("üìã –î—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", testUser.friends);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥—Ä—É–∑–µ–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Prisma
    const friends = await prisma.friend.findMany({
      where: {
        ownerId: testUser.id,
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç API –¥—Ä—É–∑–µ–π:", friends);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testFriendsAPI();
