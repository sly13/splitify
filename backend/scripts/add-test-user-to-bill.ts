import { PrismaClient } from "@prisma/client";
import dotenv from "dotenv";

dotenv.config();

const prisma = new PrismaClient();

async function addTestUserToBill() {
  try {
    console.log("üîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—á–µ—Ç—É...");

    const billId = "cmfqzvmd000035xoj9e574idg";
    const testTelegramUserId = "123456789";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—á–µ—Ç
    const bill = await prisma.bill.findUnique({
      where: { id: billId },
      include: {
        participants: true,
        creator: true,
      },
    });

    if (!bill) {
      console.log("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    console.log("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ:");
    console.log(`   ID: ${bill.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${bill.title}`);
    console.log(`   –í–∞–ª—é—Ç–∞: ${bill.currency}`);
    console.log(`   –°–æ–∑–¥–∞—Ç–µ–ª—å: ${bill.creator.firstName} (${bill.creator.username})`);
    console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${bill.participants.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const existingParticipant = bill.participants.find(
      p => p.telegramUserId === testTelegramUserId
    );

    if (existingParticipant) {
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞");
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫: ${existingParticipant.name}`);
      console.log(`   –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${existingParticipant.paymentStatus}`);
      console.log(`   –°—É–º–º–∞ –¥–æ–ª–∏: ${existingParticipant.shareAmount.toString()}`);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let testUser = await prisma.user.findFirst({
      where: {
        OR: [
          { telegramUserId: testTelegramUserId },
          { username: "test" },
          { firstName: "–¢–µ—Å—Ç" },
        ],
      },
    });

    if (!testUser) {
      console.log("üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      testUser = await prisma.user.create({
        data: {
          telegramUserId: testTelegramUserId,
          username: "test",
          firstName: "–¢–µ—Å—Ç",
        },
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.id}`);
    } else {
      console.log(`üë§ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.id}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—á–µ—Ç—É
    console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—á–µ—Ç—É...");
    
    const newParticipant = await prisma.billParticipant.create({
      data: {
        billId: billId,
        userId: testUser.id,
        telegramUserId: testTelegramUserId,
        name: testUser.firstName || "–¢–µ—Å—Ç",
        telegramUsername: testUser.username,
        shareAmount: 0.25, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞
        paymentStatus: "pending",
      },
    });

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—á–µ—Ç—É:");
    console.log(`   Participant ID: ${newParticipant.id}`);
    console.log(`   –ò–º—è: ${newParticipant.name}`);
    console.log(`   –°—É–º–º–∞ –¥–æ–ª–∏: ${newParticipant.shareAmount.toString()}`);
    console.log(`   –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${newParticipant.paymentStatus}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
    const updatedBill = await prisma.bill.findUnique({
      where: { id: billId },
      include: {
        participants: true,
      },
    });

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${updatedBill?.participants.length}`);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestUserToBill();
