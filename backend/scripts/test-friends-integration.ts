import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testFriendsIntegration() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –¥—Ä—É–∑–µ–π...");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.upsert({
      where: { telegramUserId: "123456789" },
      update: {},
      create: {
        telegramUserId: "123456789",
        username: "testuser",
        firstName: "Test",
      },
    });

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", testUser.id);

    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞—Ç—å –¥—Ä—É–∑—å—è–º–∏
    const bill = await prisma.bill.create({
      data: {
        title: "–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
        currency: "USDT",
        totalAmount: 150,
        splitType: "equal",
        creatorId: testUser.id,
        status: "open",
      },
    });

    console.log("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω:", bill.id);

    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—á–µ—Ç–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API)
    const participants = [
      {
        name: "–ê–ª–µ–∫—Å–µ–π",
        telegramUsername: "alexey_crypto",
        shareAmount: 50,
      },
      {
        name: "–ú–∞—Ä–∏—è",
        telegramUsername: "maria_tg",
        shareAmount: 50,
      },
      {
        name: "–î–º–∏—Ç—Ä–∏–π",
        telegramUsername: "dmitry_dev",
        shareAmount: 50,
      },
    ];

    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥—Ä—É–∑—å—è
    for (const participant of participants) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥—Ä—É–≥
      const existingFriend = await prisma.friend.findFirst({
        where: {
          ownerId: testUser.id,
          telegramUsername: participant.telegramUsername,
        },
      });

      // –ï—Å–ª–∏ –¥—Ä—É–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!existingFriend) {
        await prisma.friend.create({
          data: {
            ownerId: testUser.id,
            name: participant.name,
            telegramUsername: participant.telegramUsername,
          },
        });
        console.log(
          `‚úÖ –î—Ä—É–≥ ${participant.name} (@${participant.telegramUsername}) –¥–æ–±–∞–≤–ª–µ–Ω`
        );
      } else {
        console.log(`‚ÑπÔ∏è –î—Ä—É–≥ ${participant.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }

      // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—á–µ—Ç–∞
      await prisma.billParticipant.create({
        data: {
          billId: bill.id,
          userId: null, // –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          telegramUsername: participant.telegramUsername,
          name: participant.name,
          shareAmount: participant.shareAmount,
          paymentStatus: "pending",
        },
      });
    }

    console.log("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const friends = await prisma.friend.findMany({
      where: { ownerId: testUser.id },
      orderBy: { createdAt: "desc" },
    });

    console.log("\nüìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
    friends.forEach(friend => {
      console.log(
        `- ${friend.name} (@${
          friend.telegramUsername
        }) - –¥–æ–±–∞–≤–ª–µ–Ω ${friend.createdAt.toLocaleDateString()}`
      );
    });

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å—á–µ—Ç —Å —Ç–µ–º–∏ –∂–µ –¥—Ä—É–∑—å—è–º–∏
    const bill2 = await prisma.bill.create({
      data: {
        title: "–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
        currency: "USDT",
        totalAmount: 75,
        splitType: "equal",
        creatorId: testUser.id,
        status: "open",
      },
    });

    console.log("\n‚úÖ –í—Ç–æ—Ä–æ–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω:", bill2.id);

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—Ä—É–∑–µ–π
    const existingFriends = await prisma.friend.findMany({
      where: { ownerId: testUser.id },
      take: 2, // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –¥—Ä—É–∑–µ–π
    });

    for (const friend of existingFriends) {
      await prisma.billParticipant.create({
        data: {
          billId: bill2.id,
          userId: null,
          telegramUsername: friend.telegramUsername,
          name: friend.name,
          shareAmount: 37.5, // 75 / 2
          paymentStatus: "pending",
        },
      });
    }

    console.log("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—Ä—É–∑–µ–π");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalFriends = await prisma.friend.count({
      where: { ownerId: testUser.id },
    });

    const totalBills = await prisma.bill.count({
      where: { creatorId: testUser.id },
    });

    const totalParticipants = await prisma.billParticipant.count({
      where: {
        bill: { creatorId: testUser.id },
      },
    });

    console.log("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log(`- –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: ${totalFriends}`);
    console.log(`- –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${totalBills}`);
    console.log(`- –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${totalParticipants}`);

    console.log("\nüéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testFriendsIntegration();
