import { PrismaClient } from "@prisma/client";
import dotenv from "dotenv";

dotenv.config();

const prisma = new PrismaClient();

async function cleanupPayments() {
  try {
    console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "created" –∏–ª–∏ "pending"
    const oldPayments = await prisma.payment.findMany({
      where: {
        status: { in: ["created", "pending"] },
        createdAt: {
          lt: new Date(Date.now() - 24 * 60 * 60 * 1000), // —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        },
      },
      include: {
        participant: true,
      },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${oldPayments.length} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);

    if (oldPayments.length > 0) {
      console.log("üìã –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:");
      oldPayments.forEach((payment, index) => {
        console.log(`${index + 1}. Payment ID: ${payment.id}`);
        console.log(`   Status: ${payment.status}`);
        console.log(`   Created: ${payment.createdAt}`);
        console.log(`   Participant: ${payment.participant.name}`);
        console.log(`   Amount: ${payment.amount.toString()}`);
        console.log("---");
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      for (const payment of oldPayments) {
        await prisma.billParticipant.update({
          where: { id: payment.participantId },
          data: {
            paymentStatus: "pending",
            paymentId: null,
          },
        });
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏
      const deleteResult = await prisma.payment.deleteMany({
        where: {
          id: { in: oldPayments.map(p => p.id) },
        },
      });

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
    } else {
      console.log("‚úÖ –°—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "created" –∏–ª–∏ "pending"
    const allPendingPayments = await prisma.payment.findMany({
      where: {
        status: { in: ["created", "pending"] },
      },
      include: {
        participant: true,
      },
    });

    console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${allPendingPayments.length}`);
    
    if (allPendingPayments.length > 0) {
      console.log("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:");
      allPendingPayments.forEach((payment, index) => {
        console.log(`${index + 1}. Payment ID: ${payment.id}`);
        console.log(`   Status: ${payment.status}`);
        console.log(`   Created: ${payment.createdAt}`);
        console.log(`   Participant: ${payment.participant.name}`);
        console.log(`   Amount: ${payment.amount.toString()}`);
        console.log("---");
      });
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:", error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupPayments();
