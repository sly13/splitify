import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testAutomaticFriendCreation() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–∑–µ–π...");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.upsert({
      where: { telegramUserId: "test_user_123" },
      update: {},
      create: {
        telegramUserId: "test_user_123",
        username: "testuser",
        firstName: "Test",
      },
    });

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", testUser.id);

    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –¥—Ä—É–∑—å—è–º–∏
    const bill = await prisma.bill.create({
      data: {
        title: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–∑–µ–π",
        currency: "USDT",
        totalAmount: 100,
        splitType: "equal",
        creatorId: testUser.id,
        status: "open",
      },
    });

    console.log("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω:", bill.id);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç API)
    const participants = [
      {
        name: "–ê–ª–µ–∫—Å–µ–π",
        telegramUsername: "alexey_crypto",
        shareAmount: 50,
      },
      {
        name: "–ú–∞—Ä–∏—è",
        telegramUsername: "maria_tg",
        shareAmount: 50,
      },
    ];

    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥—Ä—É–∑—å—è
    for (const participant of participants) {
      console.log(
        `\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.name} (@${participant.telegramUsername})`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥—Ä—É–≥
      const existingFriend = await prisma.friend.findFirst({
        where: {
          ownerId: testUser.id,
          telegramUsername: participant.telegramUsername,
        },
      });

      // –ï—Å–ª–∏ –¥—Ä—É–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!existingFriend) {
        console.log(
          `‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞: ${participant.name} (@${participant.telegramUsername})`
        );
        await prisma.friend.create({
          data: {
            ownerId: testUser.id,
            name: participant.name,
            telegramUsername: participant.telegramUsername,
          },
        });
        console.log(
          `üéâ –î—Ä—É–≥ ${participant.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π!`
        );
      } else {
        console.log(
          `‚ÑπÔ∏è –î—Ä—É–≥ ${participant.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π`
        );
      }

      // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—á–µ—Ç–∞
      await prisma.billParticipant.create({
        data: {
          billId: bill.id,
          userId: null,
          telegramUsername: participant.telegramUsername,
          name: participant.name,
          shareAmount: participant.shareAmount,
          paymentStatus: "pending",
        },
      });
    }

    console.log("\n‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const friends = await prisma.friend.findMany({
      where: { ownerId: testUser.id },
      orderBy: { createdAt: "desc" },
    });

    console.log("\nüìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
    friends.forEach(friend => {
      console.log(
        `- ${friend.name} (@${
          friend.telegramUsername
        }) - –¥–æ–±–∞–≤–ª–µ–Ω ${friend.createdAt.toLocaleDateString()}`
      );
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å —Ç–µ–º–∏ –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    console.log("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞...");

    const bill2 = await prisma.bill.create({
      data: {
        title: "–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç",
        currency: "USDT",
        totalAmount: 200,
        splitType: "equal",
        creatorId: testUser.id,
        status: "open",
      },
    });

    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–Ω–æ–≤–∞ (–¥—Ä—É–∑—å—è –Ω–µ –¥–æ–ª–∂–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    for (const participant of participants) {
      const existingFriend = await prisma.friend.findFirst({
        where: {
          ownerId: testUser.id,
          telegramUsername: participant.telegramUsername,
        },
      });

      if (!existingFriend) {
        await prisma.friend.create({
          data: {
            ownerId: testUser.id,
            name: participant.name,
            telegramUsername: participant.telegramUsername,
          },
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥—Ä—É–≥: ${participant.name}`);
      } else {
        console.log(
          `‚ÑπÔ∏è –î—Ä—É–≥ ${participant.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ)`
        );
      }

      await prisma.billParticipant.create({
        data: {
          billId: bill2.id,
          userId: null,
          telegramUsername: participant.telegramUsername,
          name: participant.name,
          shareAmount: participant.shareAmount,
          paymentStatus: "pending",
        },
      });
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    const finalFriends = await prisma.friend.findMany({
      where: { ownerId: testUser.id },
      orderBy: { createdAt: "desc" },
    });

    console.log("\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:");
    finalFriends.forEach(friend => {
      console.log(
        `- ${friend.name} (@${
          friend.telegramUsername
        }) - –¥–æ–±–∞–≤–ª–µ–Ω ${friend.createdAt.toLocaleDateString()}`
      );
    });

    console.log(`\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: ${finalFriends.length}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testAutomaticFriendCreation();
