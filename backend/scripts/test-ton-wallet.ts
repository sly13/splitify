import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testTonWallet() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞ TON...");

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst();

    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞.");
      return;
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} (${user.username})`);

    // –û–±–Ω–æ–≤–∏–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON
    const testWalletAddress = "UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH";

    const updatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { tonWalletAddress: testWalletAddress },
    });

    console.log(
      `‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedUser.tonWalletAddress}`
    );

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    const checkUser = await prisma.user.findUnique({
      where: { id: user.id },
    });

    if (checkUser?.tonWalletAddress === testWalletAddress) {
      console.log("‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è");
    }

    // –û—á–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.user.update({
      where: { id: user.id },
      data: { tonWalletAddress: null },
    });

    console.log("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testTonWallet();
