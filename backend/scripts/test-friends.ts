import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testFriendsSystem() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–∑–µ–π...");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.upsert({
      where: { telegramUserId: "123456789" },
      update: {},
      create: {
        telegramUserId: "123456789",
        username: "testuser",
        firstName: "Test",
      },
    });

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", testUser.id);

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∑–µ–π
    const friend1 = await prisma.friend.create({
      data: {
        ownerId: testUser.id,
        name: "–ê–ª–µ–∫—Å–µ–π",
        telegramUsername: "alexey_crypto",
      },
    });

    const friend2 = await prisma.friend.create({
      data: {
        ownerId: testUser.id,
        name: "–ú–∞—Ä–∏—è",
        telegramUsername: "maria_tg",
      },
    });

    console.log("‚úÖ –î—Ä—É–∑—å—è —Å–æ–∑–¥–∞–Ω—ã:", {
      friend1: friend1.id,
      friend2: friend2.id,
    });

    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å —É—á–∞—Å—Ç–∏–µ–º –¥—Ä—É–∑–µ–π
    const bill = await prisma.bill.create({
      data: {
        title: "–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
        currency: "USDT",
        totalAmount: 100,
        splitType: "equal",
        creatorId: testUser.id,
        status: "open",
      },
    });

    console.log("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω:", bill.id);

    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—á–µ—Ç–∞
    const participant1 = await prisma.billParticipant.create({
      data: {
        billId: bill.id,
        userId: null, // –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        telegramUsername: "alexey_crypto",
        name: "–ê–ª–µ–∫—Å–µ–π",
        shareAmount: 33.33,
        paymentStatus: "pending",
      },
    });

    const participant2 = await prisma.billParticipant.create({
      data: {
        billId: bill.id,
        userId: null, // –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        telegramUsername: "maria_tg",
        name: "–ú–∞—Ä–∏—è",
        shareAmount: 33.33,
        paymentStatus: "pending",
      },
    });

    const participant3 = await prisma.billParticipant.create({
      data: {
        billId: bill.id,
        userId: testUser.id, // —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å—á–µ—Ç–∞
        telegramUserId: testUser.telegramUserId,
        name: "Test User",
        shareAmount: 33.34,
        paymentStatus: "pending",
      },
    });

    console.log("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:", {
      participant1: participant1.id,
      participant2: participant2.id,
      participant3: participant3.id,
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ê–ª–µ–∫—Å–µ–π"
    const alexeyUser = await prisma.user.create({
      data: {
        telegramUserId: "987654321",
        username: "alexey_crypto",
        firstName: "–ê–ª–µ–∫—Å–µ–π",
      },
    });

    console.log("‚úÖ –ê–ª–µ–∫—Å–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:", alexeyUser.id);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ê–ª–µ–∫—Å–µ—è –∫ —Å—á–µ—Ç—É
    await prisma.billParticipant.update({
      where: { id: participant1.id },
      data: { userId: alexeyUser.id },
    });

    console.log("‚úÖ –ê–ª–µ–∫—Å–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—á–µ—Ç—É");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalBill = await prisma.bill.findUnique({
      where: { id: bill.id },
      include: {
        participants: {
          include: {
            user: true,
          },
        },
        creator: true,
      },
    });

    console.log("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç:");
    console.log("–ù–∞–∑–≤–∞–Ω–∏–µ:", finalBill?.title);
    console.log("–°–æ–∑–¥–∞—Ç–µ–ª—å:", finalBill?.creator.firstName);
    console.log("–£—á–∞—Å—Ç–Ω–∏–∫–∏:");
    finalBill?.participants.forEach(p => {
      console.log(
        `- ${p.name}: ${p.shareAmount} ${finalBill.currency} (${p.paymentStatus})`
      );
      if (p.user) {
        console.log(
          `  –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${p.user.firstName} (@${p.user.username})`
        );
      } else {
        console.log(`  –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ`);
      }
    });

    console.log("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testFriendsSystem();
