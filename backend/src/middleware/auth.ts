import { FastifyRequest, FastifyReply } from "fastify";
import {
  validateTelegramInitData,
  extractTelegramUserId,
} from "../utils/telegram";
import { prisma } from "../config/database";
import { AuthenticatedUser } from "../types";

declare module "fastify" {
  interface FastifyRequest {
    user?: AuthenticatedUser;
  }
}

export async function authMiddleware(
  request: FastifyRequest,
  reply: FastifyReply
) {
  try {
    const initData = request.headers["x-telegram-init-data"] as string;
    const testModeHeader = request.headers["x-test-mode"] as string;
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–æ –Ω–∞–ª–∏—á–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ x-test-mode
    const isTestMode = !!testModeHeader && testModeHeader === "true";

    console.log("=== AUTH MIDDLEWARE START ===");
    console.log("üîê Auth middleware - Test mode header:", testModeHeader);
    console.log("üîê Auth middleware - Is test mode:", isTestMode);
    console.log("üîê Auth middleware - URL:", request.url);
    console.log(
      "üîê Auth middleware - initData:",
      initData ? "present" : "missing"
    );

    // –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É–∫–∞–∑–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (isTestMode) {
      console.log("Auth middleware - Using test user from database");

      // –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      let testUser = await prisma.user.findFirst({
        where: {
          OR: [
            { username: "test" },
            { telegramUserId: "123456789" },
            { firstName: "–¢–µ—Å—Ç" },
          ],
        },
      });

      if (!testUser) {
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        testUser = await prisma.user.create({
          data: {
            telegramUserId: "123456789",
            username: "test",
            firstName: "–¢–µ—Å—Ç",
          },
        });
        console.log("Auth middleware - Created test user:", testUser.id);
      } else {
        console.log("Auth middleware - Found test user:", testUser.id);
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await linkUserToBills(
        testUser.id,
        testUser.telegramUserId,
        testUser.username || undefined
      );

      request.user = testUser as AuthenticatedUser;
      console.log("‚úÖ Auth middleware - Test user set:", {
        id: testUser.id,
        telegramUserId: testUser.telegramUserId,
        username: testUser.username,
        firstName: testUser.firstName,
      });
      return; // –ó–∞–≤–µ—Ä—à–∞–µ–º middleware —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    }

    if (!initData) {
      console.log("Auth middleware - No init data found");

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ Telegram WebApp –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      if (process.env.NODE_ENV === "production") {
        console.log(
          "Auth middleware - Production mode without Telegram, checking headers for user data"
        );

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const userId = request.headers["x-user-id"] as string;
        const username = request.headers["x-username"] as string;
        const firstName = request.headers["x-first-name"] as string;

        if (userId && userId !== "production_temp_user") {
          console.log("Auth middleware - Found user data in headers:", {
            userId,
            username,
            firstName,
          });

          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
          const user = await prisma.user.upsert({
            where: { telegramUserId: userId },
            update: {
              username: username || undefined,
              firstName: firstName || undefined,
            },
            create: {
              telegramUserId: userId,
              username: username || "unknown",
              firstName: firstName || "Unknown User",
            },
          });

          request.user = user as AuthenticatedUser;
          return; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏
        }
      }

      return reply.status(401).send({ error: "Missing Telegram init data" });
    }

    let validatedData: any;
    let telegramUserId: string;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ
    if (
      initData.includes("test_hash") ||
      initData.includes("production_hash")
    ) {
      // –¢–µ—Å—Ç–æ–≤—ã–π/–ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º - –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      const urlParams = new URLSearchParams(initData);
      const userParam = urlParams.get("user");
      if (userParam) {
        const userData = JSON.parse(decodeURIComponent(userParam));
        telegramUserId = userData.id.toString();
        validatedData = { user: userData };
        console.log("Auth middleware - Using test/production data:", userData);
      } else {
        return reply
          .status(401)
          .send({ error: "Invalid test/production data" });
      }
    } else {
      // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Telegram
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        return reply.status(500).send({ error: "Bot token not configured" });
      }

      validatedData = validateTelegramInitData(initData, botToken);
      if (!validatedData) {
        return reply.status(401).send({ error: "Invalid Telegram init data" });
      }

      const extractedUserId = extractTelegramUserId(validatedData);
      if (!extractedUserId) {
        return reply.status(401).send({ error: "No user ID in init data" });
      }
      telegramUserId = extractedUserId;
    }

    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { telegramUserId },
    });

    if (!user) {
      user = await prisma.user.create({
        data: {
          telegramUserId,
          username: validatedData.user?.username,
          firstName: validatedData.user?.first_name,
        },
      });
    } else {
      // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (
        user.username !== validatedData.user?.username ||
        user.firstName !== validatedData.user?.first_name
      ) {
        user = await prisma.user.update({
          where: { id: user.id },
          data: {
            username: validatedData.user?.username,
            firstName: validatedData.user?.first_name,
          },
        });
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—Ö–æ–¥–µ
    await linkUserToBills(
      user.id,
      telegramUserId,
      validatedData.user?.username
    );

    request.user = user as AuthenticatedUser;
  } catch (error) {
    console.error("Auth middleware error:", error);
    return reply.status(500).send({ error: "Authentication failed" });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —Å—á–µ—Ç–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function linkUserToBills(
  userId: string,
  telegramUserId: string,
  username?: string
) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—á–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const unlinkedParticipants = await prisma.billParticipant.findMany({
      where: {
        userId: null,
        OR: [
          { telegramUserId: telegramUserId },
          ...(username ? [{ telegramUsername: username }] : []),
        ],
      },
      include: {
        bill: true,
      },
    });

    if (unlinkedParticipants.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∏—Ö –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await prisma.billParticipant.updateMany({
        where: {
          id: { in: unlinkedParticipants.map(p => p.id) },
        },
        data: {
          userId: userId,
        },
      });

      console.log(
        `Linked ${unlinkedParticipants.length} bill participants to user ${userId}`
      );
    }
  } catch (error) {
    console.error("Error linking user to bills:", error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏
  }
}
