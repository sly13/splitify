import { FastifyInstance } from "fastify";
import { prisma } from "../../config/database";

export async function cleanupRoutes(fastify: FastifyInstance) {
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  fastify.post("/api/admin/cleanup/payments", async (request, reply) => {
    try {
      console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "created" –∏–ª–∏ "pending"
      const oldPayments = await prisma.payment.findMany({
        where: {
          status: { in: ["created", "pending"] },
          createdAt: {
            lt: new Date(Date.now() - 24 * 60 * 60 * 1000), // —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
          },
        },
        include: {
          participant: true,
        },
      });

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${oldPayments.length} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);

      if (oldPayments.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for (const payment of oldPayments) {
          await prisma.billParticipant.update({
            where: { id: payment.participantId },
            data: {
              paymentStatus: "pending",
              paymentId: null,
            },
          });
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        const deleteResult = await prisma.payment.deleteMany({
          where: {
            id: { in: oldPayments.map(p => p.id) },
          },
        });

        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);

        return reply.send({
          success: true,
          message: `–£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`,
          deletedPayments: oldPayments.map(p => ({
            id: p.id,
            status: p.status,
            createdAt: p.createdAt,
            participant: p.participant.name,
            amount: p.amount.toString(),
          })),
        });
      } else {
        console.log("‚úÖ –°—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return reply.send({
          success: true,
          message: "–°—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
          deletedPayments: [],
        });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:", error);
      return reply.status(500).send({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
    }
  });

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  fastify.get("/api/admin/cleanup/payments", async (request, reply) => {
    try {
      const activePayments = await prisma.payment.findMany({
        where: {
          status: { in: ["created", "pending"] },
        },
        include: {
          participant: {
            include: {
              bill: {
                select: {
                  id: true,
                  title: true,
                },
              },
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      return reply.send({
        success: true,
        activePayments: activePayments.map(payment => ({
          id: payment.id,
          status: payment.status,
          amount: payment.amount.toString(),
          createdAt: payment.createdAt,
          participant: {
            id: payment.participant.id,
            name: payment.participant.name,
            paymentStatus: payment.participant.paymentStatus,
          },
          bill: {
            id: payment.participant.bill.id,
            title: payment.participant.bill.title,
          },
        })),
        count: activePayments.length,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:", error);
      return reply.status(500).send({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  fastify.delete("/api/admin/cleanup/payments/:paymentId", async (request, reply) => {
    try {
      const { paymentId } = request.params as { paymentId: string };

      const payment = await prisma.payment.findUnique({
        where: { id: paymentId },
        include: {
          participant: true,
        },
      });

      if (!payment) {
        return reply.status(404).send({
          success: false,
          error: "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
      await prisma.billParticipant.update({
        where: { id: payment.participantId },
        data: {
          paymentStatus: "pending",
          paymentId: null,
        },
      });

      // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      await prisma.payment.delete({
        where: { id: paymentId },
      });

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ ${paymentId} –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${payment.participant.name}`);

      return reply.send({
        success: true,
        message: `–ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`,
        deletedPayment: {
          id: payment.id,
          status: payment.status,
          participant: payment.participant.name,
          amount: payment.amount.toString(),
        },
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
      return reply.status(500).send({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
    }
  });
}
