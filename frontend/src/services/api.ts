import axios, { type AxiosInstance, type AxiosResponse } from "axios";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–µ—Ñ–æ–ª—Ç–æ–º –≤ dev
const isTestMode = (): boolean => {
  const envFlag = import.meta.env.VITE_TEST_MODE as string | undefined;
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –≤ dev-—Ä–µ–∂–∏–º–µ –≤–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const fallback = import.meta.env.DEV ? "true" : "false";
  return (envFlag ?? fallback) === "true";
};

// –ë–∞–∑–æ–≤—ã–π URL API (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

console.log("üîß API Configuration:", {
  API_BASE_URL,
  NODE_ENV: import.meta.env.NODE_ENV,
  DEV: import.meta.env.DEV,
  PROD: import.meta.env.PROD,
  VITE_API_BASE_URL: import.meta.env.VITE_API_BASE_URL,
  VITE_TEST_MODE: import.meta.env.VITE_TEST_MODE,
  location: window.location.href,
  origin: window.location.origin,
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Axios
const api: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Telegram –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
api.interceptors.request.use(
  config => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram WebApp –∏–∑ window
    const tg = window.Telegram?.WebApp;
    const testMode = isTestMode();
    console.log(
      "üåê API Request:",
      config.method?.toUpperCase(),
      config.url,
      "Base URL:",
      config.baseURL,
      "Full URL:",
      `${config.baseURL}${config.url}`
    );
    console.log(
      "API Interceptor - Test mode:",
      testMode,
      "VITE_TEST_MODE:",
      import.meta.env.VITE_TEST_MODE,
      "Has Telegram WebApp:",
      !!tg
    );

    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-test-mode - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é

    if (tg) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (tg.initData) {
        config.headers.set("x-telegram-hash", tg.initDataUnsafe.hash || "");
        // config.headers.set(
        //   "x-user-id",
        //   tg.initDataUnsafe.user?.id?.toString() || ""
        // );
        config.headers.set("x-telegram-init-data", tg.initData);
      }
    } else if (testMode) {
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      config.headers.set("x-telegram-hash", "test_hash");
      config.headers.set("x-user-id", "123456789");
      config.headers.set("x-telegram-init-data", "test_init_data");
      config.headers.set("X-Telegram-Init-Data", "test_init_data");
    } else if (process.env.NODE_ENV === "production") {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ Telegram WebApp —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram
      console.log(
        "üöÄ Production mode without Telegram WebApp - using production data"
      );

      const userId = "7148394161"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
      const authDate = Math.floor(Date.now() / 1000);
      const userData = {
        id: parseInt(userId),
        first_name: "Production",
        last_name: "User",
        username: "production_user",
        language_code: "ru",
      };

      // –°–æ–∑–¥–∞–µ–º initData –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram
      const initData = `query_id=AAGx1hMqAwAAALHWEyp4AOq7&user=${encodeURIComponent(
        JSON.stringify(userData)
      )}&auth_date=${authDate}&hash=production_hash`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ x-telegram-init-data - –≤ –Ω–µ–º –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      config.headers.set("x-telegram-init-data", initData);
    }

    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response: AxiosResponse) => {
    console.log("‚úÖ API Response:", response.status, response.config.url);
    return response;
  },
  error => {
    console.error("‚ùå API Error:", error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
      const { status, data } = error.response;
      console.error("Server responded with error:", status, data);

      switch (status) {
        case 401:
          // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
          console.error("Unauthorized access");
          break;
        case 403:
          // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
          console.error("Access forbidden");
          break;
        case 404:
          // –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
          console.error("Resource not found");
          break;
        case 500:
          // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
          console.error("Internal server error");
          break;
        default:
          console.error("API Error:", data?.message || "Unknown error");
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      console.error("Network error - no response received:", error.message);
      console.error("Request config:", error.config);
    } else {
      // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error("Request setup error:", error.message);
    }

    return Promise.reject(error);
  }
);

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—á–µ—Ç–∞–º–∏
export const billApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getBills: (): Promise<any> => {
    console.log("Using bills endpoint: /bills");
    return api.get("/bills");
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—á–µ—Ç
  getBill: (billId: string): Promise<any> => {
    console.log("Getting bill with endpoint:", `/bills/${billId}`);
    return api.get(`/bills/${billId}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç
  createBill: (data: any): Promise<any> => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è API
    const apiData = {
      ...data,
      participants: data.participants.map((participant: any) => ({
        name: participant.name,
        telegramUsername: participant.telegramUsername || undefined,
        shareAmount: participant.amount.toString(),
        isPayer: participant.isPayer || false,
      })),
      creatorWalletAddress: data.creatorWalletAddress || undefined,
    };

    console.log("Creating bill with endpoint: /bills");
    console.log("API data:", apiData);
    return api.post("/bills", apiData);
  },

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—á–µ—Ç—É
  joinBill: (billId: string, data: any): Promise<any> => {
    return api.post(`/bills/${billId}/join`, data);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç
  updateBill: (billId: string, data: any): Promise<any> => {
    return api.put(`/bills/${billId}`, data);
  },

  // –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç
  deleteBill: (billId: string): Promise<any> => {
    return api.delete(`/bills/${billId}`);
  },

  // –û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –∑–∞ –≤–µ—Å—å —Å—á—ë—Ç
  markPayer: (
    billId: string,
    participantId: string,
    isPayer: boolean
  ): Promise<any> => {
    return api.put(`/bills/${billId}/participants/${participantId}/payer`, {
      isPayer,
    });
  },
};

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
export const paymentApi = {
  // –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
  createPayment: (data: any): Promise<any> => {
    console.log("Using create payment endpoint: /payments/intent");
    return api.post("/payments/intent", data);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  getPaymentStatus: (paymentId: string): Promise<any> => {
    console.log(
      "Using get payment status endpoint:",
      `/payments/${paymentId}/status`
    );
    return api.get(`/payments/${paymentId}/status`);
  },

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
  confirmPayment: (
    paymentId: string,
    transactionHash: string
  ): Promise<any> => {
    return api.post(`/payments/${paymentId}/confirm`, { transactionHash });
  },
};

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const userApi = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  initUser: (): Promise<any> => {
    const testMode = isTestMode();
    if (testMode) {
      console.log("Initializing test user");
      return api.post("/user/init");
    } else {
      // –í –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      return userApi.getMe();
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  getMe: (): Promise<any> => {
    const testMode = isTestMode();
    const endpoint = testMode ? "/me/test" : "/me";
    console.log("Using me endpoint:", endpoint);
    return api.get(endpoint);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  getUser: (): Promise<any> => {
    return api.get("/user/profile");
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateProfile: (data: any): Promise<any> => {
    return api.put("/user/profile", data);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats: (): Promise<any> => {
    return api.get("/user/stats");
  },
};

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏
export const friendsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
  getFriends: (): Promise<any> => {
    console.log("Using friends endpoint: /friends");
    return api.get("/friends");
  },

  // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
  addFriend: (data: {
    name: string;
    telegramUsername?: string;
  }): Promise<any> => {
    console.log("Using add friend endpoint: /friends");
    return api.post("/friends", data);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∞
  updateFriend: (
    friendId: string,
    data: { name?: string; telegramUsername?: string }
  ): Promise<any> => {
    console.log("Using update friend endpoint:", `/friends/${friendId}`);
    return api.put(`/friends/${friendId}`, data);
  },

  // –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
  deleteFriend: (friendId: string): Promise<any> => {
    console.log("Using delete friend endpoint:", `/friends/${friendId}`);
    return api.delete(`/friends/${friendId}`);
  },

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
  searchUser: (username: string): Promise<any> => {
    console.log("Using search user endpoint:", `/friends/search/${username}`);
    return api.get(`/friends/search/${username}`);
  },
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
interface AnalyticsResponse {
  success: boolean;
  data: {
    stats: {
      totalBills: number;
      completedBills: number;
      activeBills: number;
      totalAmount: number;
      paidAmount: number;
      completionRate: number;
      remainingAmount: number;
    };
    friendsDebts: Array<{
      name: string;
      telegramUsername?: string;
      totalDebt: number;
      billsCount: number;
      bills: Array<{ id: string; title: string; amount: number }>;
    }>;
  };
}

interface FriendAnalyticsResponse {
  success: boolean;
  data: {
    friendId: string;
    totalDebt: number;
    debts: Array<{
      billId: string;
      billTitle: string;
      amount: number;
      currency: string;
      createdAt: string;
      status: string;
    }>;
  };
}

// API –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const analyticsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–æ–ª–≥–æ–≤
  getDebtsAnalytics: (): Promise<{ data: AnalyticsResponse }> => {
    console.log("Using analytics endpoint: /analytics/debts");
    return api.get("/analytics/debts");
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥—Ä—É–≥—É
  getFriendDebtsAnalytics: (
    friendId: string
  ): Promise<{ data: FriendAnalyticsResponse }> => {
    console.log(
      "Using friend analytics endpoint:",
      `/analytics/debts/${friendId}`
    );
    return api.get(`/analytics/debts/${friendId}`);
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
export const testApiConnection = async (): Promise<boolean> => {
  try {
    // –£–±–∏—Ä–∞–µ–º /api –∏–∑ URL –¥–ª—è health check, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ
    const baseUrl = API_BASE_URL.replace("/api", "");
    const healthUrl = `${baseUrl}/health`;
    console.log("üß™ Testing API connection to:", healthUrl);

    const response = await fetch(healthUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log("üîç Health check response:", {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      url: response.url,
    });

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ API connection successful, data:", data);
      return true;
    } else {
      console.error(
        "‚ùå API connection failed:",
        response.status,
        response.statusText
      );
      return false;
    }
  } catch (error: any) {
    console.error("‚ùå API connection error:", error);
    console.error("Error details:", {
      name: error?.name,
      message: error?.message,
      stack: error?.stack,
    });
    return false;
  }
};

export default api;
