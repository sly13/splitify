import React, { useState, useEffect } from "react";
import { useTelegram } from "../hooks/useTelegram";
import { useAuth } from "../contexts/AuthContext";
import { friendsApi } from "../services/api";

interface Friend {
  id: string;
  name: string;
  telegramUsername?: string;
  createdAt: string;
}

interface FriendsPageProps {
  onCreateBill?: () => void;
}

export const FriendsPage: React.FC<FriendsPageProps> = ({ onCreateBill }) => {
  const [friends, setFriends] = useState<Friend[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newFriend, setNewFriend] = useState({
    name: "",
    telegramUsername: "",
  });
  const [deleteModal, setDeleteModal] = useState<{
    friendId: string;
    friendName: string;
  } | null>(null);
  const { hapticFeedback, showAlert, showSuccess } = useTelegram();
  const { isAuthenticated } = useAuth();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated) {
      console.log("üîê User authenticated, loading friends...");
      loadFriends();
    }
  }, [isAuthenticated]);

  const loadFriends = async () => {
    try {
      setLoading(true);
      const response = await friendsApi.getFriends();
      setFriends(response.data.friends || []);
      setError(null);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleAddFriend = async () => {
    if (!newFriend.name.trim()) {
      hapticFeedback.notification("error");
      showAlert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞");
      return;
    }

    try {
      const response = await friendsApi.addFriend({
        name: newFriend.name.trim(),
        telegramUsername: newFriend.telegramUsername.replace("@", ""),
      });

      setFriends(prev => [response.data.friend, ...prev]);
      setNewFriend({ name: "", telegramUsername: "" });
      setShowAddForm(false);
      hapticFeedback.notification("success");
      showSuccess("–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω!");
    } catch (err: unknown) {
      const errorMessage =
        (err as { response?: { data?: { error?: string } } })?.response?.data
          ?.error || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞";
      showAlert(errorMessage);
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:", err);
    }
  };

  const handleDeleteClick = (friendId: string, friendName: string) => {
    hapticFeedback.impact("medium");
    setDeleteModal({ friendId, friendName });
  };

  const handleConfirmDelete = async () => {
    if (!deleteModal) return;

    try {
      await friendsApi.deleteFriend(deleteModal.friendId);
      setFriends(prev =>
        prev.filter(friend => friend.id !== deleteModal.friendId)
      );
      setDeleteModal(null);
      hapticFeedback.notification("success");
    } catch (err: unknown) {
      const errorResponse = err as {
        response?: {
          data?: {
            error?: string;
            message?: string;
            billsCount?: number;
            bills?: Array<{ id: string; title: string; status: string }>;
          };
        };
      };

      const errorData = errorResponse?.response?.data;

      if (errorData?.billsCount && errorData.billsCount > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        const billsList =
          errorData.bills?.map(bill => `"${bill.title}"`).join(", ") || "";
        const message = `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞. –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞: ${billsList}`;
        showAlert(message);
      } else {
        // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
        const errorMessage =
          errorData?.error || errorData?.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞";
        showAlert(errorMessage);
      }

      setDeleteModal(null);
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:", err);
    }
  };

  const handleCancelDelete = () => {
    hapticFeedback.impact("light");
    setDeleteModal(null);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("ru-RU", {
      day: "numeric",
      month: "short",
      year: "numeric",
    });
  };

  if (loading) {
    return (
      <div className="friends-page">
        <div className="header">
          <h1>üë• –î—Ä—É–∑—å—è</h1>
          <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤</p>
        </div>
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  return (
    <div className="friends-page">
      <div className="header">
        <h1>üë• –î—Ä—É–∑—å—è</h1>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤</p>
      </div>

      {error && (
        <div className="error-message">
          <div className="error-icon">‚ö†Ô∏è</div>
          <div className="error-text">{error}</div>
          <button onClick={loadFriends} className="error-retry-btn">
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ */}
      {!showAddForm && (
        <div className="actions">
          <button
            onClick={() => setShowAddForm(true)}
            className="primary-button"
          >
            + –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
          </button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ */}
      {showAddForm && (
        <div className="bill-form">
          <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞</h2>

          <div className="form-group">
            <label>–ò–º—è –¥—Ä—É–≥–∞</label>
            <input
              type="text"
              value={newFriend.name}
              onChange={e =>
                setNewFriend({ ...newFriend, name: e.target.value })
              }
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              autoFocus
            />
          </div>

          <div className="form-group">
            <label>Telegram username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <input
              type="text"
              value={newFriend.telegramUsername}
              onChange={e => {
                let value = e.target.value;
                if (value && !value.startsWith("@")) {
                  value = "@" + value;
                }
                setNewFriend({ ...newFriend, telegramUsername: value });
              }}
              placeholder="@username"
            />
          </div>

          <div className="form-actions">
            <button
              onClick={() => {
                setShowAddForm(false);
                setNewFriend({ name: "", telegramUsername: "" });
              }}
              className="secondary-button"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button onClick={handleAddFriend} className="primary-button">
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π */}
      {friends.length > 0 ? (
        <div className="friends-section">
          <h2>–ú–æ–∏ –¥—Ä—É–∑—å—è ({friends.length})</h2>
          <div className="friends-list">
            {friends.map(friend => (
              <div key={friend.id} className="friend-card">
                <div className="friend-info">
                  <div className="friend-avatar">
                    {friend.name.charAt(0).toUpperCase()}
                  </div>
                  <div className="friend-details">
                    <h3>{friend.name}</h3>
                    {friend.telegramUsername && (
                      <p>@{friend.telegramUsername}</p>
                    )}
                    <span className="friend-date">
                      –î–æ–±–∞–≤–ª–µ–Ω {formatDate(friend.createdAt)}
                    </span>
                  </div>
                </div>

                <div className="friend-actions">
                  {onCreateBill && (
                    <button
                      onClick={() => {
                        hapticFeedback.selection();
                        onCreateBill();
                      }}
                      className="create-bill-btn"
                    >
                      –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç
                    </button>
                  )}
                  <button
                    onClick={() => handleDeleteClick(friend.id, friend.name)}
                    className="delete-btn"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="empty-state">
          <div className="empty-icon">üë•</div>
          <h3>–ù–µ—Ç –¥—Ä—É–∑–µ–π</h3>
          <p>–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤</p>
          <button
            onClick={() => setShowAddForm(true)}
            className="primary-button"
          >
            –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞
          </button>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {friends.length > 0 && (
        <div className="friends-stats">
          <div className="stat-card">
            <div className="stat-icon">üë•</div>
            <div className="stat-content">
              <div className="stat-number">{friends.length}</div>
              <div className="stat-label">–í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π</div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {deleteModal && (
        <div className="modal-overlay" onClick={handleCancelDelete}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞?</h3>
              <button className="close-button" onClick={handleCancelDelete}>
                ‚úï
              </button>
            </div>
            <div className="modal-body">
              <p>
                –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å{" "}
                <strong>{deleteModal.friendName}</strong> –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π?
              </p>
              <div className="warning-text">
                ‚ö†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞ —Å —ç—Ç–∏–º –¥—Ä—É–≥–æ–º, —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç
                –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
              </div>
              <div className="modal-actions">
                <button
                  onClick={handleCancelDelete}
                  className="secondary-button"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button onClick={handleConfirmDelete} className="danger-button">
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
