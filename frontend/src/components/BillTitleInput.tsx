import React, { useState, useRef, useEffect } from "react";

interface BillTitleInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
  error?: string;
}

const SUGGESTED_TITLES = [
  "–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
  "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ",
  "–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
  "–¢–∞–∫—Å–∏",
  "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
  "–ö–æ–Ω—Ü–µ—Ä—Ç",
  "–°–ø–æ—Ä—Ç–∑–∞–ª",
  "–ê–ø—Ç–µ–∫–∞",
  "–ë–µ–Ω–∑–∏–Ω",
  "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç",
  "–ö–∞—Ñ–µ —Å –¥—Ä—É–∑—å—è–º–∏",
  "–ü–∏—Ü—Ü–µ—Ä–∏—è",
  "–°—É—à–∏-–±–∞—Ä",
  "–ë—É—Ä–≥–µ—Ä–Ω–∞—è",
  "–ö–æ—Ñ–µ–π–Ω—è",
  "–ë–∞—Ä",
  "–ö–ª—É–±",
  "–ü–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π",
  "–ú—É–∑–µ–π",
  "–¢–µ–∞—Ç—Ä",
  "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
  "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
  "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å",
  "–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã",
  "–ü–æ–¥–ø–∏—Å–∫–∏",
  "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
  "–ü–∞—Ä–∫–æ–≤–∫–∞",
  "–®—Ç—Ä–∞—Ñ—ã",
  "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
  "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
];

export const BillTitleInput: React.FC<BillTitleInputProps> = ({
  value,
  onChange,
  placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: –£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
  className = "",
  error,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);
  const [isSelecting, setIsSelecting] = useState(false);
  const [hasUserTyped, setHasUserTyped] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const selectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (isSelecting) {
      return;
    }

    if (value.trim()) {
      const filtered = SUGGESTED_TITLES.filter(title =>
        title.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredSuggestions(filtered);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–ª –∏–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
      setIsOpen(filtered.length > 0 && (hasUserTyped || !value.trim()));
    } else {
      setFilteredSuggestions(SUGGESTED_TITLES.slice(0, 8));
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
      // setIsOpen(false); - —É–±–∏—Ä–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    }
  }, [value, isSelecting, hasUserTyped]);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (isSelecting) {
        return;
      }

      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node) &&
        inputRef.current &&
        !inputRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isSelecting]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setHasUserTyped(true);
    onChange(e.target.value);
  };

  const handleSuggestionClick = (suggestion: string) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (selectTimeoutRef.current) {
      clearTimeout(selectTimeoutRef.current);
    }

    setIsSelecting(true);
    setHasUserTyped(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–≤–æ–¥–∞
    onChange(suggestion);
    setIsOpen(false);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
    selectTimeoutRef.current = setTimeout(() => {
      setIsSelecting(false);
      selectTimeoutRef.current = null;
    }, 1000);
  };

  const handleInputFocus = () => {
    if (isSelecting) {
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if (!value.trim()) {
      setFilteredSuggestions(SUGGESTED_TITLES.slice(0, 8));
      setIsOpen(true);
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (hasUserTyped && value.trim()) {
      const filtered = SUGGESTED_TITLES.filter(title =>
        title.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredSuggestions(filtered);
      setIsOpen(filtered.length > 0);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Escape") {
      setIsOpen(false);
    }
  };

  const handleInputBlur = () => {
    if (isSelecting) {
      return;
    }

    setTimeout(() => {
      if (!isSelecting) {
        setIsOpen(false);
      }
    }, 200);
  };

  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (selectTimeoutRef.current) {
        clearTimeout(selectTimeoutRef.current);
      }
    };
  }, []);

  return (
    <div className={`bill-title-input ${className}`}>
      <input
        ref={inputRef}
        type="text"
        value={value}
        onChange={handleInputChange}
        onFocus={handleInputFocus}
        onBlur={handleInputBlur}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        className={error ? "error" : ""}
      />

      {isOpen && (
        <div ref={dropdownRef} className="suggestions-dropdown">
          <div className="suggestions-header">
            <span className="suggestions-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</span>
          </div>
          <div className="suggestions-list">
            {filteredSuggestions.map((suggestion, index) => (
              <div
                key={index}
                className="suggestion-item"
                onMouseDown={e => {
                  e.preventDefault();
                  handleSuggestionClick(suggestion);
                }}
              >
                <span className="suggestion-icon">üí°</span>
                <span className="suggestion-text">{suggestion}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {error && <span className="error-message">{error}</span>}
    </div>
  );
};

export default BillTitleInput;
