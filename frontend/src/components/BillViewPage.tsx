import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useTelegram } from "../hooks/useTelegram";
import { useBillStore } from "../stores/billStore";
import { ParticipantStatus } from "../types/app";

const BillViewPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user, hapticFeedback, showError } = useTelegram();
  const { currentBill, fetchBill, isLoading } = useBillStore();

  const [showShareModal, setShowShareModal] = useState(false);

  useEffect(() => {
    if (id) {
      fetchBill(id);
    }
  }, [id, fetchBill]);

  if (isLoading) {
    return (
      <div className="loading-screen">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç–∞...</p>
      </div>
    );
  }

  if (!currentBill) {
    return (
      <div className="error-screen">
        <h2>–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <button className="primary-button" onClick={() => navigate("/")}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  const paidAmount = currentBill.participants.reduce(
    (sum, p) => sum + (p.status === ParticipantStatus.PAID ? p.amount : 0),
    0
  );
  const progressPercentage = (paidAmount / currentBill.totalAmount) * 100;

  const currentUserParticipant = currentBill.participants.find(
    p => p.user.id === user?.id
  );

  const handlePayShare = async () => {
    if (!currentUserParticipant) {
      showError("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å—á—ë—Ç–∞");
      return;
    }

    if (currentUserParticipant.status === ParticipantStatus.PAID) {
      showError("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–≤–æ—é –¥–æ–ª—é");
      return;
    }

    hapticFeedback.impact("medium");

    try {
      // TODO: –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é
      const paymentIntent = await createPaymentIntent({
        billId: currentBill.id,
        amount: currentUserParticipant.amount,
        currency: currentBill.currency,
      });

      // –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      await openPayment(paymentIntent);
    } catch {
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  };

  const handleShare = () => {
    hapticFeedback.impact("medium");
    setShowShareModal(true);
  };

  const createPaymentIntent = async (data: unknown) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–µ—Å—Å–∏–∏
    console.log("Creating payment intent:", data);
    return { id: "payment_123", url: "ton://transfer/..." };
  };

  const openPayment = async (paymentIntent: unknown) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    console.log("Opening payment:", paymentIntent);
  };

  return (
    <div className="bill-view-page">
      <div className="bill-header">
        <div className="bill-title">
          <h1>{currentBill.title}</h1>
          <p className="bill-description">{currentBill.description}</p>
        </div>

        <div className="bill-summary">
          <div className="total-amount">
            <span className="amount">{currentBill.totalAmount}</span>
            <span className="currency">{currentBill.currency}</span>
          </div>

          <div className="progress-section">
            <div className="progress-bar">
              <div
                className="progress-fill"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
            <div className="progress-text">
              –û–ø–ª–∞—á–µ–Ω–æ: {paidAmount} {currentBill.currency} –∏–∑{" "}
              {currentBill.totalAmount} {currentBill.currency}
            </div>
          </div>
        </div>
      </div>

      <div className="participants-section">
        <div className="section-header">
          <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
          <button className="share-button" onClick={handleShare}>
            üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </button>
        </div>

        <div className="participants-table">
          {currentBill.participants.map(participant => (
            <div key={participant.id} className="participant-row">
              <div className="participant-info">
                <div className="participant-avatar">
                  {participant.user.photoUrl ? (
                    <img
                      src={participant.user.photoUrl}
                      alt={participant.user.firstName}
                    />
                  ) : (
                    <span>{participant.user.firstName[0]}</span>
                  )}
                </div>
                <div className="participant-details">
                  <div className="participant-name">
                    {participant.user.firstName} {participant.user.lastName}
                  </div>
                  {participant.user.username && (
                    <div className="participant-username">
                      @{participant.user.username}
                    </div>
                  )}
                </div>
              </div>

              <div className="participant-amount">
                {participant.amount} {currentBill.currency}
              </div>

              <div className="participant-status">
                <span className={`status-badge ${participant.status}`}>
                  {participant.status === ParticipantStatus.PENDING &&
                    "–û–∂–∏–¥–∞–µ—Ç"}
                  {participant.status === ParticipantStatus.CONFIRMED &&
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"}
                  {participant.status === ParticipantStatus.PAID && "–û–ø–ª–∞—á–µ–Ω–æ"}
                </span>
                {participant.status === ParticipantStatus.PAID && (
                  <div className="payment-time">
                    {new Date(participant.joinedAt).toLocaleDateString()}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {currentUserParticipant &&
        currentUserParticipant.status !== ParticipantStatus.PAID && (
          <div className="payment-section">
            <div className="payment-card">
              <div className="payment-info">
                <h3>–í–∞—à–∞ –¥–æ–ª—è</h3>
                <div className="payment-amount">
                  {currentUserParticipant.amount} {currentBill.currency}
                </div>
              </div>
              <button className="pay-button" onClick={handlePayShare}>
                üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª—é
              </button>
            </div>
          </div>
        )}

      {showShareModal && (
        <ShareModal
          billId={currentBill.id}
          onClose={() => setShowShareModal(false)}
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª–∫–∏ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
const ShareModal: React.FC<{ billId: string; onClose: () => void }> = ({
  billId,
  onClose,
}) => {
  // const { webApp } = useTelegram();
  const [qrCode, setQrCode] = useState<string>("");

  const shareUrl = `https://t.me/your_bot?startapp=bill_${billId}`;

  useEffect(() => {
    // TODO: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥
    import("qrcode").then(QRCode => {
      QRCode.toDataURL(shareUrl).then(url => {
        setQrCode(url);
      });
    });
  }, [shareUrl]);

  const handleShare = () => {
    // TODO: Implement Telegram share functionality
    console.log("Sharing:", shareUrl);
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h3>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—á—ë—Ç–æ–º</h3>
          <button className="close-button" onClick={onClose}>
            ‚úï
          </button>
        </div>

        <div className="modal-body">
          <div className="share-url">
            <input type="text" value={shareUrl} readOnly />
            <button onClick={() => navigator.clipboard.writeText(shareUrl)}>
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>

          {qrCode && (
            <div className="qr-code">
              <img src={qrCode} alt="QR –∫–æ–¥" />
              <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥</p>
            </div>
          )}

          <button className="telegram-share-button" onClick={handleShare}>
            üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
          </button>
        </div>
      </div>
    </div>
  );
};

export default BillViewPage;
