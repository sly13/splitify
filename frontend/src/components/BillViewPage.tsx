import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useTelegram } from "../hooks/useTelegram";
import { useBillStore } from "../stores/billStore";
import { useAuth } from "../contexts/AuthContext";
import { useAuthStore } from "../stores/authStore";
import {
  ParticipantStatus,
  type Participant,
  type PaymentIntent,
  type User,
} from "../types/app";
import { userApi } from "../services/api";
import { useWalletConnection } from "../hooks/useWalletConnection";
import WalletConnectionModal from "./WalletConnectionModal";

const BillViewPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user, hapticFeedback, showError, showSuccess, webApp } =
    useTelegram();
  const { currentBill, fetchBill, isLoading } = useBillStore();
  const { isAuthenticated } = useAuth();
  const authUser = useAuthStore(state => state.user);

  const [showShareModal, setShowShareModal] = useState(false);
  const [userData, setUserData] = useState<User | null>(null);
  const [showWalletModal, setShowWalletModal] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const { isConnected: isWalletConnected } = useWalletConnection();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram BackButton
  useEffect(() => {
    if (webApp?.BackButton) {
      webApp.BackButton.show();
      webApp.BackButton.onClick(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ (startapp)
        const startParam = (webApp?.initDataUnsafe as { start_param?: string })
          ?.start_param;

        if (startParam) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ, –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          navigate("/", { replace: true });
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
          navigate(-1);
        }
      });
    }

    return () => {
      if (webApp?.BackButton) {
        webApp.BackButton.hide();
        webApp.BackButton.offClick(() => {
          // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        });
      }
    };
  }, [webApp, navigate]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (id && isAuthenticated) {
      console.log("üîê User authenticated, fetching bill...");
      fetchBill(id);
    }
  }, [id, isAuthenticated, fetchBill]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
  useEffect(() => {
    const loadUserData = async () => {
      try {
        const response = await userApi.getMe();
        if (response.data?.success && response.data?.data) {
          setUserData(response.data.data);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    };

    loadUserData();
  }, []);

  if (isLoading) {
    return (
      <div className="loading-screen">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç–∞...</p>
      </div>
    );
  }

  if (!currentBill) {
    return (
      <div className="error-screen">
        <h2>–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <button className="primary-button" onClick={() => navigate("/")}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  const paidAmount = (currentBill.participants || []).reduce((sum, p) => {
    const isPaid = (p.paymentStatus || p.status) === "paid";
    const amount = parseFloat(p.shareAmount || p.amount?.toString() || "0");
    return sum + (isPaid ? amount : 0);
  }, 0);
  const progressPercentage = (paidAmount / currentBill.totalAmount) * 100;

  // –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const currentUserParticipant = (currentBill.participants || []).find(p => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ fallback –Ω–∞ Telegram WebApp
    const currentUserId = userData?.id || user?.id;
    const currentUserTelegramId =
      userData?.telegramUserId || user?.id?.toString();
    const currentUsername = userData?.username || user?.username;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user.id (–µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    if (p.user?.id && currentUserId) {
      return p.user.id.toString() === currentUserId.toString();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ telegramUserId (–µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    if (p.telegramUserId && currentUserTelegramId) {
      return p.telegramUserId === currentUserTelegramId;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ telegramUsername (–µ—Å–ª–∏ –µ—Å—Ç—å username)
    if (p.telegramUsername && currentUsername) {
      return p.telegramUsername === currentUsername;
    }

    return false;
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ BillViewPage:");
  console.log("user (Telegram WebApp):", user);
  console.log("userData (API):", userData);
  console.log("currentBill.participants:", currentBill.participants);
  console.log("currentUserParticipant:", currentUserParticipant);
  console.log("isPayer:", currentUserParticipant?.isPayer);

  const handlePayShare = async () => {
    if (!currentUserParticipant) {
      showError("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å—á—ë—Ç–∞");
      return;
    }

    if (currentUserParticipant.status === ParticipantStatus.PAID) {
      showError("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–≤–æ—é –¥–æ–ª—é");
      return;
    }

    hapticFeedback.impact("medium");

    // –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (!isWalletConnected) {
      setShowWalletModal(true);
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é
      const paymentIntent = await createPaymentIntent({
        billId: currentBill.id,
        amount:
          currentUserParticipant.shareAmount ||
          currentUserParticipant.amount?.toString() ||
          "0",
        currency: currentBill.currency,
      });

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      await openPayment(paymentIntent);
    } catch (error) {
      console.error("Payment error:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  };

  const handleShareParticipant = async (participant: Participant) => {
    if (!currentBill) {
      showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    hapticFeedback.impact("medium");

    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º startapp
    const botName = import.meta.env.VITE_TELEGRAM_BOT_NAME || "splitify_tg_bot";
    const appUrl = `https://t.me/${botName}?startapp=bill_${currentBill.id}`;

    // –ï—Å–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å telegramUserId, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Bot API
    if (participant.telegramUserId) {
      try {
        const response = await fetch(
          `/api/bills/${currentBill.id}/send-to-participant`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              participantId: participant.id,
              telegramUserId: participant.telegramUserId,
              appUrl,
            }),
          }
        );

        const result = await response.json();

        if (response.ok) {
          showSuccess(`–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${participant.name}!`);
          return;
        } else {
          console.warn("Telegram API failed:", result.error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      } catch (error) {
        console.error("Error sending via Telegram API:", error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    setShowShareModal(true);
  };

  const createPaymentIntent = async (data: {
    billId: string;
    amount: string;
    currency: string;
  }): Promise<PaymentIntent> => {
    try {
      const response = await fetch("/api/payments/intent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          billId: data.billId,
          amount: parseFloat(data.amount),
          currency: data.currency,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create payment intent");
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error("Error creating payment intent:", error);
      throw error;
    }
  };

  const openPayment = async (paymentIntent: PaymentIntent) => {
    try {
      if (paymentIntent.provider === "TON" && paymentIntent.deeplink) {
        // –î–ª—è TON –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepLink
        const link = document.createElement("a");
        link.href = paymentIntent.deeplink;
        link.target = "_blank";
        link.click();

        showSuccess("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –æ–ø–ª–∞—Ç—ã...");
      } else {
        showError("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    } catch (error) {
      console.error("Error opening payment:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã");
    }
  };

  const handleWalletConnected = (address: string) => {
    console.log("Wallet connected:", address);
    showSuccess("–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂.");
    // –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É —Å–Ω–æ–≤–∞
    setTimeout(() => {
      handlePayShare();
    }, 1000);
  };

  const handleShare = () => {
    const tg = webApp;
    const user = authUser || userData;

    if (tg?.ready && user?.ref) {
      const url = `https://t.me/share/url?url=https://t.me/cs_cases_app_bot/join?startapp=${user.ref}`;
      tg.openTelegramLink(url);
    } else {
      showError("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
    }
  };

  return (
    <div className="bill-view-page">
      <div className="bill-header">
        <div className="bill-title">
          <div className="bill-title-row">
            <h1>{currentBill.title}</h1>
            {webApp?.ready && (authUser?.ref || userData?.ref) && (
              <button
                className="share-button"
                onClick={handleShare}
                title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
              >
                üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </button>
            )}
          </div>
          <p className="bill-description">{currentBill.description}</p>
        </div>

        <div className="bill-summary">
          <div className="total-amount">
            <span className="amount">{currentBill.totalAmount}</span>
            <span className="currency">{currentBill.currency}</span>
          </div>

          <div className="progress-section">
            <div className="progress-bar">
              <div
                className="progress-fill"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
            <div className="progress-text">
              –û–ø–ª–∞—á–µ–Ω–æ: {paidAmount} {currentBill.currency} –∏–∑{" "}
              {currentBill.totalAmount} {currentBill.currency}
            </div>
          </div>

          {/* –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
          {currentBill.creatorWalletAddress && (
            <div className="wallet-address-section">
              <div className="wallet-label">
                üí≥ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
              </div>
              <div className="wallet-address">
                {currentBill.creatorWalletAddress}
              </div>
              <div className="wallet-actions">
                <button
                  className="copy-address-button"
                  onClick={() => {
                    navigator.clipboard.writeText(
                      currentBill.creatorWalletAddress!
                    );
                    showSuccess?.("–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
                  }}
                >
                  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
                </button>
                <button
                  className="open-wallet-button"
                  onClick={() => {
                    const walletAddress = currentBill.creatorWalletAddress!;
                    const tonDeepLink = `ton://transfer/${walletAddress}`;
                    const link = document.createElement("a");
                    link.href = tonDeepLink;
                    link.target = "_blank";
                    link.click();
                    showSuccess?.("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ TON...");
                  }}
                >
                  ‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="participants-section">
        <div className="section-header">
          <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
        </div>

        <div className="participants-table">
          {(currentBill.participants || [])
            .sort((a, b) => {
              // –°–Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫ (isPayer: true) –≤—Å–µ–≥–¥–∞ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
              if (a.isPayer && !b.isPayer) return -1;
              if (!a.isPayer && b.isPayer) return 1;

              // –ï—Å–ª–∏ –æ–±–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∏ –∏–ª–∏ –æ–±–∞ –Ω–µ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã
              const aStatus = a.paymentStatus || a.status;
              const bStatus = b.paymentStatus || b.status;

              // –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–ø–ª–∞—Ç–∏–ª, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –æ–ø–ª–∞—Ç–∏–≤—à–∏–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
              if (aStatus === "paid" && bStatus !== "paid") return -1;
              if (aStatus !== "paid" && bStatus === "paid") return 1;

              // –ï—Å–ª–∏ –æ–±–∞ –≤ –æ–¥–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
              const aName = a.user?.firstName || a.name;
              const bName = b.user?.firstName || b.name;
              return aName.localeCompare(bName, "ru");
            })
            .map(participant => (
              <div
                key={participant.id}
                className={`participant-row ${
                  participant.isPayer ? "payer-row" : ""
                }`}
              >
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.user?.photoUrl ? (
                      <img
                        src={participant.user.photoUrl}
                        alt={participant.user.firstName}
                      />
                    ) : (
                      <span>
                        {participant.user?.firstName?.[0] ||
                          participant.name[0]}
                      </span>
                    )}
                  </div>
                  <div className="participant-details">
                    <div className="participant-name">
                      {participant.user
                        ? `${participant.user.firstName} ${
                            participant.user.lastName || ""
                          }`
                        : participant.name}
                    </div>
                    {(participant.user?.username ||
                      participant.telegramUsername) && (
                      <div className="participant-username">
                        @
                        {participant.user?.username ||
                          participant.telegramUsername}
                      </div>
                    )}
                  </div>
                </div>

                {!participant.isPayer && (
                  <div className="participant-status">
                    <span
                      className={`status-badge ${
                        participant.paymentStatus || participant.status
                      }`}
                    >
                      {(participant.paymentStatus || participant.status) ===
                        "pending" &&
                        !participant.isPayer &&
                        "–û–∂–∏–¥–∞–µ—Ç"}
                      {(participant.paymentStatus || participant.status) ===
                        "confirmed" && "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"}
                      {(participant.paymentStatus || participant.status) ===
                        "paid" && "–û–ø–ª–∞—á–µ–Ω–æ"}
                    </span>
                    {(participant.paymentStatus || participant.status) ===
                      "paid" && (
                      <div className="payment-time">
                        {new Date(
                          participant.joinedAt || ""
                        ).toLocaleDateString()}
                      </div>
                    )}
                  </div>
                )}
                {participant.isPayer && (
                  <span className="payer-badge">üí≥ –ó–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –≤—Å–µ—Ö</span>
                )}

                <div className="participant-amount">
                  {participant.shareAmount || participant.amount}{" "}
                  {currentBill.currency}
                </div>

                <div className="participant-actions">
                  {!participant.isPayer && (
                    <button
                      className="share-participant-button"
                      onClick={() => handleShareParticipant(participant)}
                      title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º"
                    >
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 8C19.6569 8 21 6.65685 21 5C21 3.34315 19.6569 2 18 2C16.3431 2 15 3.34315 15 5C15 5.12549 15.0077 5.24819 15.0227 5.36777L8.09187 9.17071C7.30026 8.44454 6.20298 8 5 8C2.79086 8 1 9.79086 1 12C1 14.2091 2.79086 16 5 16C6.20298 16 7.30026 15.5555 8.09187 14.8293L15.0227 18.6322C15.0077 18.7518 15 18.8745 15 19C15 20.6569 16.3431 22 18 22C19.6569 22 21 20.6569 21 19C21 17.3431 19.6569 16 18 16C16.797 16 15.6997 16.4445 14.9081 17.1707L7.97727 13.3678C7.99231 13.2482 8 13.1255 8 13C8 12.8745 7.99231 12.7518 7.97727 12.6322L14.9081 8.82929C15.6997 9.55546 16.797 10 18 10C19.6569 10 21 8.65685 21 7C21 5.34315 19.6569 4 18 4C16.3431 4 15 5.34315 15 7C15 7.12549 15.0077 7.24819 15.0227 7.36777L8.09187 11.1707C7.30026 10.4445 6.20298 10 5 10C2.79086 10 1 11.7909 1 14C1 16.2091 2.79086 18 5 18C6.20298 18 7.30026 17.5555 8.09187 16.8293L15.0227 20.6322C15.0077 20.7518 15 20.8745 15 21C15 22.6569 16.3431 24 18 24C19.6569 24 21 22.6569 21 21C21 19.3431 19.6569 18 18 18C16.797 18 15.6997 18.4445 14.9081 19.1707L7.97727 15.3678C7.99231 15.2482 8 15.1255 8 15C8 14.8745 7.99231 14.7518 7.97727 14.6322L14.9081 10.8293C15.6997 11.5555 16.797 12 18 12C19.6569 12 21 10.6569 21 9C21 7.34315 19.6569 6 18 6C16.3431 6 15 7.34315 15 9C15 9.12549 15.0077 9.24819 15.0227 9.36777L8.09187 13.1707C7.30026 12.4445 6.20298 12 5 12C2.79086 12 1 13.7909 1 16C1 18.2091 2.79086 20 5 20C6.20298 20 7.30026 19.5555 8.09187 18.8293L15.0227 22.6322C15.0077 22.7518 15 22.8745 15 23C15 24.6569 16.3431 26 18 26C19.6569 26 21 24.6569 21 23C21 21.3431 19.6569 20 18 20C16.797 20 15.6997 20.4445 14.9081 21.1707L7.97727 17.3678C7.99231 17.2482 8 17.1255 8 17C8 16.8745 7.99231 16.7518 7.97727 16.6322L14.9081 12.8293C15.6997 13.5555 16.797 14 18 14C19.6569 14 21 12.6569 21 11C21 9.34315 19.6569 8 18 8Z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  )}
                </div>
              </div>
            ))}
        </div>
      </div>

      {currentUserParticipant &&
        (currentUserParticipant.paymentStatus ||
          currentUserParticipant.status) !== "paid" &&
        !currentUserParticipant.isPayer && (
          <div className="payment-section">
            <div className="payment-card">
              <div className="payment-info">
                <h3>–í–∞—à–∞ –¥–æ–ª—è</h3>
                <div className="payment-amount">
                  {currentUserParticipant.shareAmount ||
                    currentUserParticipant.amount}{" "}
                  {currentBill.currency}
                </div>
              </div>

              {/* –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ */}
              {currentBill.creatorWalletAddress && (
                <div className="wallet-address-section">
                  <div className="wallet-label">
                    üí≥ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
                  </div>
                  <div className="wallet-address">
                    {currentBill.creatorWalletAddress}
                  </div>
                  <div className="wallet-actions">
                    <button
                      className="copy-address-button"
                      onClick={() => {
                        navigator.clipboard.writeText(
                          currentBill.creatorWalletAddress!
                        );
                        showSuccess?.("–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
                      }}
                    >
                      üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
                    </button>
                    <button
                      className="open-wallet-button"
                      onClick={() => {
                        const walletAddress = currentBill.creatorWalletAddress!;
                        const tonDeepLink = `ton://transfer/${walletAddress}`;
                        const link = document.createElement("a");
                        link.href = tonDeepLink;
                        link.target = "_blank";
                        link.click();
                        showSuccess?.("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ TON...");
                      }}
                    >
                      ‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ
                    </button>
                  </div>
                </div>
              )}

              <button className="pay-button" onClick={handlePayShare}>
                üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª—é
              </button>
            </div>
          </div>
        )}

      {showShareModal && (
        <ShareModal
          billId={currentBill.id}
          onClose={() => setShowShareModal(false)}
        />
      )}

      {showWalletModal && (
        <WalletConnectionModal
          isOpen={showWalletModal}
          onClose={() => setShowWalletModal(false)}
          onWalletConnected={handleWalletConnected}
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª–∫–∏ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
const ShareModal: React.FC<{ billId: string; onClose: () => void }> = ({
  billId,
  onClose,
}) => {
  const { showSuccess, showError, hapticFeedback } = useTelegram();
  const { currentBill } = useBillStore();
  const [selectedParticipants, setSelectedParticipants] = useState<string[]>(
    []
  );
  const [isSending, setIsSending] = useState(false);

  const botName = import.meta.env.VITE_TELEGRAM_BOT_NAME || "splitify_tg_bot";
  const shareUrl = `https://t.me/${botName}?startapp=bill_${billId}`;

  // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å telegramUserId (–∏—Å–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
  const participantsWithTelegram = (currentBill?.participants || []).filter(
    p =>
      p.telegramUserId &&
      p.telegramUserId !== currentBill?.creator?.id?.toString()
  );

  const handleParticipantToggle = (participantId: string) => {
    setSelectedParticipants(prev =>
      prev.includes(participantId)
        ? prev.filter(id => id !== participantId)
        : [...prev, participantId]
    );
  };

  const handleSelectAll = () => {
    if (selectedParticipants.length === participantsWithTelegram.length) {
      setSelectedParticipants([]);
    } else {
      setSelectedParticipants(participantsWithTelegram.map(p => p.id));
    }
  };

  const handleSendMessages = async () => {
    if (selectedParticipants.length === 0) {
      showError("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
      return;
    }

    setIsSending(true);
    hapticFeedback.impact("medium");

    try {
      const response = await fetch(
        `/api/bills/${billId}/send-to-participants`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            participantIds: selectedParticipants,
            shareUrl,
          }),
        }
      );

      const result = await response.json();

      if (response.ok) {
        showSuccess(result.message || "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
        onClose();
      } else {
        showError(result.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π");
      }
    } catch (error) {
      console.error("Error sending messages:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h3>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—á—ë—Ç–æ–º</h3>
          <button className="close-button" onClick={onClose}>
            ‚úï
          </button>
        </div>

        <div className="modal-body">
          <div className="share-url">
            <input type="text" value={shareUrl} readOnly />
            <button onClick={() => navigator.clipboard.writeText(shareUrl)}>
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>

          {participantsWithTelegram.length > 0 && (
            <div className="participants-selection">
              <div className="selection-header">
                <h4>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:</h4>
                <button className="select-all-button" onClick={handleSelectAll}>
                  {selectedParticipants.length ===
                  participantsWithTelegram.length
                    ? "–°–Ω—è—Ç—å –≤—Å–µ"
                    : "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö"}
                </button>
              </div>

              <div className="participants-list">
                {participantsWithTelegram.map(participant => (
                  <div key={participant.id} className="participant-checkbox">
                    <label>
                      <input
                        type="checkbox"
                        checked={selectedParticipants.includes(participant.id)}
                        onChange={() => handleParticipantToggle(participant.id)}
                      />
                      <span className="participant-name">
                        {participant.name}
                        {participant.telegramUsername && (
                          <span className="username">
                            @{participant.telegramUsername}
                          </span>
                        )}
                      </span>
                    </label>
                  </div>
                ))}
              </div>

              <button
                className="send-messages-button"
                onClick={handleSendMessages}
                disabled={isSending || selectedParticipants.length === 0}
              >
                {isSending
                  ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..."
                  : `üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å (${selectedParticipants.length})`}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default BillViewPage;
