import React, { useState } from "react";
import { useTelegram } from "../hooks/useTelegram";
import { useAppStore } from "../stores/appStore";
import { useTheme } from "../hooks/useTheme";
import CustomSelect from "./CustomSelect";

const SettingsPage: React.FC = () => {
  const { webApp } = useTelegram();
  const { setTheme } = useAppStore();
  const { isDark, isLight, isAuto } = useTheme();

  const [settings, setSettings] = useState({
    language: "ru",
    defaultCurrency: "USDT",
  });

  const handleSettingChange = (key: string, value: string | boolean) => {
    setSettings(prev => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleThemeChange = (newTheme: "light" | "dark" | "auto") => {
    setTheme(newTheme);
  };

  const handleClearData = () => {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?")) {
      localStorage.clear();
      window.location.reload();
    }
  };

  return (
    <div className="settings-page">
      <div className="settings-header">
        <h1>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
        <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
      </div>

      <div className="settings-section">
        <h3>–û–±—â–∏–µ</h3>

        <div className="setting-group">
          <label htmlFor="language">–Ø–∑—ã–∫</label>
          <CustomSelect
            options={[
              { value: "ru", label: "–†—É—Å—Å–∫–∏–π", icon: "üá∑üá∫" },
              { value: "en", label: "English", icon: "üá∫üá∏" },
            ]}
            value={settings.language}
            onChange={value => handleSettingChange("language", value)}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
          />
        </div>

        <div className="setting-group">
          <label htmlFor="currency">–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</label>
          <CustomSelect
            options={[
              { value: "USDT", label: "USDT", icon: "üíµ" },
              { value: "TON", label: "TON", icon: "üíé" },
            ]}
            value={settings.defaultCurrency}
            onChange={value => handleSettingChange("defaultCurrency", value)}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É"
          />
        </div>

        <div className="setting-group">
          <label htmlFor="theme">–¢–µ–º–∞</label>
          <CustomSelect
            options={[
              { value: "light", label: "–°–≤–µ—Ç–ª–∞—è", icon: "‚òÄÔ∏è" },
              { value: "dark", label: "–¢—ë–º–Ω–∞—è", icon: "üåô" },
              { value: "auto", label: "–ê–≤—Ç–æ", icon: "üîÑ" },
            ]}
            value={isLight ? "light" : isDark ? "dark" : "auto"}
            onChange={handleThemeChange}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É"
          />
        </div>
      </div>

      <div className="settings-section">
        <h3>–î–∞–Ω–Ω—ã–µ</h3>

        <div className="setting-group">
          <button className="danger-button" onClick={handleClearData}>
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
          </button>
        </div>
      </div>

      <div className="app-info">
        <h3>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
        <div className="info-item">
          <span>–í–µ—Ä—Å–∏—è</span>
          <span>1.0.0</span>
        </div>
        <div className="info-item">
          <span>Telegram WebApp</span>
          <span>{webApp?.version || "N/A"}</span>
        </div>
        <div className="info-item">
          <span>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</span>
          <span>{webApp?.platform || "N/A"}</span>
        </div>
      </div>
    </div>
  );
};

export default SettingsPage;
