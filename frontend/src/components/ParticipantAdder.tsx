import React, { useState, useEffect } from "react";
import { UsernameInput } from "./UsernameInput";
import { useTelegram } from "../hooks/useTelegram";
import FriendsSelect from "./FriendsSelect";

interface Participant {
  id: string;
  name: string;
  telegramUsername?: string;
  telegramUserId?: string;
  shareAmount: string;
  isPayer?: boolean;
}

interface Friend {
  id: string;
  name: string;
  telegramUsername?: string;
}

interface ParticipantAdderProps {
  participants: Participant[];
  onParticipantsChange: (participants: Participant[]) => void;
  totalAmount: number;
  splitType: "equal" | "custom";
  onSplitTypeChange: (splitType: "equal" | "custom") => void;
  currency: string;
  friends?: Friend[]; // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑–≤–Ω–µ
  payerError?: string; // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã - –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—É—é –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
const distributeAmountEqually = (
  totalAmount: number,
  participantCount: number
): string[] => {
  if (participantCount === 0) return [];

  // –î–µ–ª–∏–º —Å—É–º–º—É –ø–æ—Ä–æ–≤–Ω—É –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ —Å–æ—Ç—ã—Ö
  const equalAmount = Math.ceil((totalAmount / participantCount) * 100) / 100;

  // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É
  return Array(participantCount).fill(equalAmount.toFixed(2));
};

export const ParticipantAdder: React.FC<ParticipantAdderProps> = ({
  participants,
  onParticipantsChange,
  totalAmount,
  splitType,
  onSplitTypeChange,
  currency,
  friends = [],
  payerError,
}) => {
  const { user } = useTelegram();
  const [newParticipant, setNewParticipant] = useState({
    name: "",
    telegramUsername: "",
    shareAmount: "",
  });
  const [showAddForm, setShowAddForm] = useState(false);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("üîç ParticipantAdder –ø–æ–ª—É—á–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", participants);
  console.log("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", participants.length);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const { hapticFeedback } = useTelegram();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
  useEffect(() => {
    const usernames =
      friends
        ?.filter((friend: Friend) => friend.telegramUsername)
        .map((friend: Friend) => `@${friend.telegramUsername}`) || [];
    setSuggestions(usernames);
  }, [friends]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—â–µ–π —Å—É–º–º—ã
  useEffect(() => {
    if (splitType === "equal" && participants.length > 0 && totalAmount > 0) {
      const distributedAmounts = distributeAmountEqually(
        totalAmount,
        participants.length
      );
      const updatedParticipants = participants.map((p, index) => ({
        ...p,
        shareAmount: distributedAmounts[index],
      }));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å—É–º–º—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      const hasChanges = updatedParticipants.some(
        (p, index) => p.shareAmount !== participants[index].shareAmount
      );

      if (hasChanges) {
        onParticipantsChange(updatedParticipants);
      }
    }
  }, [splitType, totalAmount, participants.length, onParticipantsChange]); // eslint-disable-line react-hooks/exhaustive-deps

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –µ—Å–ª–∏ —Å–µ–±—è –µ—â–µ –Ω–µ—Ç
  useEffect(() => {
    if (user && participants.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const isSelfAlreadyAdded = participants.some(
        p => p.telegramUserId === user.id.toString()
      );

      if (!isSelfAlreadyAdded) {
        const selfParticipant: Participant = {
          id: `self_${user.id}`,
          name: `${user.first_name}${
            user.last_name ? ` ${user.last_name}` : ""
          }`,
          telegramUsername: user.username || undefined,
          telegramUserId: user.id.toString(),
          shareAmount: "0",
        };

        const updatedParticipants = [selfParticipant];

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ" –∏ –µ—Å—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é
        if (splitType === "equal" && totalAmount > 0) {
          const equalShare = totalAmount / updatedParticipants.length;
          updatedParticipants.forEach(p => {
            p.shareAmount = equalShare.toFixed(2);
          });
        }

        onParticipantsChange(updatedParticipants);
      }
    }
  }, [user, participants, splitType, totalAmount, onParticipantsChange]);

  const handleContactSelect = (contact: Friend) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫
    const isAlreadyAdded = participants.some(
      p =>
        p.telegramUsername === contact.telegramUsername ||
        (user &&
          p.telegramUserId === user.id.toString() &&
          contact.telegramUsername === user.username)
    );

    if (isAlreadyAdded) {
      hapticFeedback.notification("error");
      return;
    }

    // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const participant: Participant = {
      id: contact.id.startsWith("self_") ? contact.id : Date.now().toString(),
      name: contact.name,
      telegramUsername: contact.telegramUsername || undefined,
      telegramUserId: contact.id.startsWith("self_")
        ? user?.id.toString()
        : undefined,
      shareAmount: "0",
    };

    const updatedParticipants = [...participants, participant];

    // –ï—Å–ª–∏ —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ", –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    if (splitType === "equal") {
      const equalShare = totalAmount / updatedParticipants.length;
      updatedParticipants.forEach(p => {
        p.shareAmount = equalShare.toFixed(2);
      });
    }

    onParticipantsChange(updatedParticipants);
    hapticFeedback.notification("success");
  };

  const handleAddParticipant = () => {
    if (!newParticipant.name.trim()) {
      hapticFeedback.notification("error");
      return;
    }

    const participant: Participant = {
      id: Date.now().toString(),
      name: newParticipant.name.trim(),
      telegramUsername: newParticipant.telegramUsername
        ? newParticipant.telegramUsername.replace("@", "").trim()
        : undefined,
      shareAmount: newParticipant.shareAmount || "0",
    };

    const updatedParticipants = [...participants, participant];

    // –ï—Å–ª–∏ —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ", –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    if (splitType === "equal") {
      const equalShare = totalAmount / updatedParticipants.length;
      updatedParticipants.forEach(p => {
        p.shareAmount = equalShare.toFixed(2);
      });
    }

    console.log("üîÑ –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:", participant);
    console.log("üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", updatedParticipants);

    onParticipantsChange(updatedParticipants);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setNewParticipant({
      name: "",
      telegramUsername: "",
      shareAmount: "",
    });
    setShowAddForm(false);

    hapticFeedback.notification("success");
  };

  const handleRemoveParticipant = (id: string) => {
    const updatedParticipants = participants.filter(p => p.id !== id);

    // –ï—Å–ª–∏ —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ", –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    if (splitType === "equal" && updatedParticipants.length > 0) {
      const distributedAmounts = distributeAmountEqually(
        totalAmount,
        updatedParticipants.length
      );
      updatedParticipants.forEach((p, index) => {
        p.shareAmount = distributedAmounts[index];
      });
    }

    onParticipantsChange(updatedParticipants);
    hapticFeedback.selection();
  };

  const handlePayerChange = (participantId: string, isPayer: boolean) => {
    const updatedParticipants = participants.map(p => {
      if (p.id === participantId) {
        return { ...p, isPayer };
      } else if (isPayer) {
        // –ï—Å–ª–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–æ–≥–æ-—Ç–æ –∫–∞–∫ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞, —Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        return { ...p, isPayer: false };
      }
      return p;
    });

    onParticipantsChange(updatedParticipants);
    hapticFeedback.selection();
  };

  const handleAmountChange = (participantId: string, newAmount: string) => {
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ" –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∏–∑–º–µ–Ω—è—Ç—å —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é,
    // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º "–Ω–µ—Ä–∞–≤–Ω—ã–π"
    if (splitType === "equal") {
      onSplitTypeChange("custom");
    }

    const updatedParticipants = participants.map(p => {
      if (p.id === participantId) {
        return { ...p, shareAmount: newAmount };
      }
      return p;
    });

    onParticipantsChange(updatedParticipants);
  };

  const handleEqualSplit = () => {
    if (participants.length === 0 || totalAmount <= 0) return;

    const distributedAmounts = distributeAmountEqually(
      totalAmount,
      participants.length
    );
    const updatedParticipants = participants.map((p, index) => ({
      ...p,
      shareAmount: distributedAmounts[index],
    }));

    onParticipantsChange(updatedParticipants);
    hapticFeedback.selection();
  };

  const calculateTotal = () => {
    return participants.reduce(
      (sum, p) => sum + parseFloat(p.shareAmount || "0"),
      0
    );
  };

  const isTotalValid = Math.abs(calculateTotal() - totalAmount) < 0.01;

  return (
    <div className="space-y-4">
      {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      {participants.length > 0 && (
        <div className="participants-list">
          <div className="participants-header">
            <div className="participants-count">
              {participants.length}{" "}
              {participants.length === 1
                ? "—É—á–∞—Å—Ç–Ω–∏–∫"
                : participants.length < 5
                ? "—É—á–∞—Å—Ç–Ω–∏–∫–∞"
                : "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"}
            </div>
            {splitType === "custom" && participants.length > 1 && (
              <button
                onClick={handleEqualSplit}
                className="equal-split-button"
                title="–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–≤–Ω—É"
              >
                ‚öñÔ∏è –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
              </button>
            )}
          </div>
          {participants.map(participant => {
            console.log("üé® –†–µ–Ω–¥–µ—Ä–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:", participant);
            const isSelf =
              user && participant.telegramUserId === user.id.toString();
            return (
              <div
                key={participant.id}
                className={`participant-item ${
                  isSelf ? "self-participant" : ""
                }`}
              >
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.name.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <h4>
                      {participant.name}
                      {isSelf && <span className="self-badge"> (–í—ã)</span>}
                    </h4>
                    {participant.telegramUsername && (
                      <p>@{participant.telegramUsername}</p>
                    )}
                  </div>
                </div>
                <div className="participant-amount-section">
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    value={participant.shareAmount || "0"}
                    onChange={e =>
                      handleAmountChange(participant.id, e.target.value)
                    }
                    className="amount-input"
                    placeholder="0.00"
                    disabled={splitType === "equal"}
                    title={
                      splitType === "equal"
                        ? "–°—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                        : "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                    }
                  />
                  <span className="currency-label">{currency}</span>
                </div>
                <div className="participant-actions">
                  <label className="payer-checkbox">
                    <input
                      type="checkbox"
                      checked={participant.isPayer || false}
                      onChange={e =>
                        handlePayerChange(participant.id, e.target.checked)
                      }
                      title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –∑–∞ –≤–µ—Å—å —Å—á—ë—Ç"
                    />
                    <span className="checkbox-label">üí≥ –ü–ª–∞—Ç–∏–ª</span>
                  </label>
                  <button
                    onClick={() => handleRemoveParticipant(participant.id)}
                    className="remove-participant"
                    title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
      {!showAddForm && (
        <div className="add-participant-section">
          <FriendsSelect
            onSelect={handleContactSelect}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥—Ä—É–∑–µ–π"
            excludeParticipants={participants}
            friends={friends}
          />

          <button
            onClick={() => setShowAddForm(true)}
            className="add-manual-button"
          >
            + –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—Ä—É—á–Ω—É—é
          </button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
      {showAddForm && (
        <div className="participant-form">
          <h3>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</h3>

          <div className="form-group">
            <label>–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞</label>
            <input
              type="text"
              value={newParticipant.name}
              onChange={e =>
                setNewParticipant({ ...newParticipant, name: e.target.value })
              }
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            />
          </div>

          <div className="form-group">
            <label>Telegram username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <UsernameInput
              value={newParticipant.telegramUsername}
              onChange={value =>
                setNewParticipant({
                  ...newParticipant,
                  telegramUsername: value,
                })
              }
              placeholder="–í–≤–µ–¥–∏—Ç–µ @username"
              suggestions={suggestions}
            />
          </div>

          {splitType === "custom" && (
            <div className="form-group">
              <label>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ ({currency})</label>
              <input
                type="number"
                step="0.01"
                value={newParticipant.shareAmount}
                onChange={e =>
                  setNewParticipant({
                    ...newParticipant,
                    shareAmount: e.target.value,
                  })
                }
                placeholder="0.00"
              />
            </div>
          )}

          <div className="form-actions">
            <button onClick={handleAddParticipant} className="primary-button">
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
            <button
              onClick={() => setShowAddForm(false)}
              className="secondary-button"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      )}

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ */}
      <div className="total-summary">
        <div className="total-row">
          <span className="total-label">–ò—Ç–æ–≥–æ:</span>
          <span
            className={`total-amount ${isTotalValid ? "valid" : "invalid"}`}
          >
            {calculateTotal().toFixed(2)} / {totalAmount.toFixed(2)} {currency}
          </span>
        </div>
        {!isTotalValid && (
          <div className="total-error">
            –°—É–º–º–∞ –¥–æ–ª–µ–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –æ–±—â–µ–π —Å—É–º–º–µ —Å—á–µ—Ç–∞
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–µ –∏ –¥–æ–ª–≥–∞—Ö */}
      {participants.some(p => p.isPayer) && (
        <div className="payer-info-section">
          <h4>üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö</h4>
          {participants.map(participant => {
            if (participant.isPayer) {
              const othersDebt = participants
                .filter(p => !p.isPayer)
                .reduce((sum, p) => sum + parseFloat(p.shareAmount || "0"), 0);

              return (
                <div key={participant.id} className="payer-info">
                  <div className="payer-details">
                    <strong>{participant.name}</strong> –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –≤–µ—Å—å —Å—á—ë—Ç
                  </div>
                  <div className="debt-info">
                    –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –µ–º—É:{" "}
                    <strong>
                      {othersDebt.toFixed(2)} {currency}
                    </strong>
                  </div>
                </div>
              );
            }
            return null;
          })}
        </div>
      )}

      {/* –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ */}
      {payerError && (
        <div className="payer-error-section">
          <div className="error-message">
            ‚ö†Ô∏è {payerError}
          </div>
          <div className="payer-hint">
            –û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–æ–π "üí≥ –ü–ª–∞—Ç–∏–ª" —É —Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ —Å—á—ë—Ç
          </div>
        </div>
      )}
    </div>
  );
};
