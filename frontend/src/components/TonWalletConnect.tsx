import React, { useState, useEffect } from "react";
import {
  TonConnectUIProvider,
  TonConnectButton,
  useTonConnectUI,
} from "@tonconnect/ui-react";
import { useTelegram } from "../hooks/useTelegram";
import { userApi } from "../services/api";

interface TonWalletConnectProps {
  onWalletConnected?: (address: string) => void;
  onWalletDisconnected?: () => void;
}

const TonWalletContent: React.FC<TonWalletConnectProps> = ({
  onWalletConnected,
  onWalletDisconnected,
}) => {
  const [tonConnectUI] = useTonConnectUI();
  const { webApp } = useTelegram();
  const [isConnected, setIsConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –∫–æ—à–µ–ª–µ–∫
    const checkConnection = () => {
      if (tonConnectUI.account) {
        setIsConnected(true);
        setWalletAddress(tonConnectUI.account.address);
        onWalletConnected?.(tonConnectUI.account.address);
      } else {
        setIsConnected(false);
        setWalletAddress(null);
        onWalletDisconnected?.();
      }
    };

    checkConnection();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const unsubscribe = tonConnectUI.onStatusChange(wallet => {
      if (wallet && "account" in wallet) {
        setIsConnected(true);
        setWalletAddress(wallet.account.address);
        onWalletConnected?.(wallet.account.address);
        saveWalletAddress(wallet.account.address);
      } else {
        setIsConnected(false);
        setWalletAddress(null);
        onWalletDisconnected?.();
        removeWalletAddress();
      }
    });

    return () => {
      unsubscribe();
    };
  }, [tonConnectUI, onWalletConnected, onWalletDisconnected]);

  const saveWalletAddress = async (address: string) => {
    try {
      setIsLoading(true);
      setError(null);

      await userApi.updateProfile({
        tonWalletAddress: address,
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      if (webApp && "showAlert" in webApp) {
        (webApp as any).showAlert("–ö–æ—à–µ–ª–µ–∫ TON —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞");
      if (webApp && "showAlert" in webApp) {
        (webApp as any).showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const removeWalletAddress = async () => {
    try {
      setIsLoading(true);
      setError(null);

      await userApi.updateProfile({
        tonWalletAddress: null,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞");
    } finally {
      setIsLoading(false);
    }
  };

  const formatAddress = (address: string) => {
    if (address.length <= 10) return address;
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  return (
    <div className="ton-wallet-connect">
      <div className="wallet-header"></div>

      {error && (
        <div className="error-message">
          <span>‚ö†Ô∏è {error}</span>
        </div>
      )}

      <div className="wallet-content">
        {isConnected && walletAddress ? (
          <div className="wallet-connected">
            <div className="wallet-info">
              <div className="wallet-icon">‚ö°</div>
              <div className="wallet-details">
                <div className="wallet-label">TON –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω</div>
                <div className="wallet-address">
                  {formatAddress(walletAddress)}
                </div>
              </div>
            </div>

            <button
              className="disconnect-button"
              onClick={() => tonConnectUI.disconnect()}
              disabled={isLoading}
            >
              {isLoading ? "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ..." : "–û—Ç–∫–ª—é—á–∏—Ç—å"}
            </button>
          </div>
        ) : (
          <div className="wallet-disconnected">
            <div className="wallet-icon-large">üöÄ</div>
            <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</p>
            <TonConnectButton />
          </div>
        )}
      </div>

      <div className="wallet-benefits">
        <h4>–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫:</h4>
        <ul>
          <li>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π</li>
          <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–ª–æ–∫—á–µ–π–Ω–∞</li>
          <li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram</li>
          <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤</li>
        </ul>
      </div>
    </div>
  );
};

const TonWalletConnect: React.FC<TonWalletConnectProps> = props => {
  return (
    <TonConnectUIProvider
      manifestUrl="/tonconnect-manifest.json"
      walletsListConfiguration={{
        includeWallets: [
          {
            appName: "tonwallet",
            name: "TON Wallet",
            imageUrl: "https://wallet.ton.org/assets/ui/qr-logo.png",
            aboutUrl:
              "https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd",
            universalLink: "https://wallet.ton.org/ton-connect",
            jsBridgeKey: "tonwallet",
            bridgeUrl: "https://bridge.tonapi.io/bridge",
            platforms: ["chrome", "android"],
          },
          {
            appName: "tonkeeper",
            name: "Tonkeeper",
            imageUrl: "https://tonkeeper.com/assets/tonconnect-icon.png",
            aboutUrl: "https://tonkeeper.com",
            universalLink: "https://app.tonkeeper.com/ton-connect",
            jsBridgeKey: "tonkeeper",
            bridgeUrl: "https://bridge.tonapi.io/bridge",
            platforms: ["ios", "android", "chrome", "firefox"],
          },
        ],
      }}
      actionsConfiguration={{
        twaReturnUrl: "https://t.me/your_bot",
      }}
    >
      <TonWalletContent {...props} />
    </TonConnectUIProvider>
  );
};

export default TonWalletConnect;
