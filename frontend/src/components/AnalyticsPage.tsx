import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useBillStore } from "../stores/billStore";
import { useTelegram } from "../hooks/useTelegram";
import { analyticsApi } from "../services/api";

interface AnalyticsData {
  stats: {
    totalBills: number;
    completedBills: number;
    activeBills: number;
    totalAmount: number;
    paidAmount: number;
    completionRate: number;
    remainingAmount: number;
  };
  friendsDebts: Array<{
    name: string;
    telegramUsername?: string;
    totalDebt: number;
    billsCount: number;
    bills: Array<{ id: string; title: string; amount: number }>;
  }>;
}

const AnalyticsPage: React.FC = () => {
  const { bills } = useBillStore();
  const { user, hapticFeedback } = useTelegram();
  const navigate = useNavigate();
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedFriend, setSelectedFriend] = useState<{
    name: string;
    telegramUsername?: string;
    totalDebt: number;
    billsCount: number;
  } | null>(null);
  const [friendDebtsData, setFriendDebtsData] = useState<{
    friendId: string;
    totalDebt: number;
    debts: Array<{
      billId: string;
      billTitle: string;
      amount: number;
      currency: string;
      createdAt: string;
      status: string;
    }>;
  } | null>(null);
  const [isLoadingFriendDebts, setIsLoadingFriendDebts] = useState(false);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
  const formatNumber = (value: unknown, decimals: number = 2): string => {
    if (value === null || value === undefined) {
      return "0.00";
    }
    const num = Number(value);
    return isNaN(num) ? "0.00" : num.toFixed(decimals);
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalBills = bills.length;
  const completedBills = bills.filter(
    bill => bill.status === "completed"
  ).length;
  const activeBills = bills.filter(bill => bill.status === "active").length;

  const totalAmount = bills.reduce((sum, bill) => sum + bill.totalAmount, 0);
  const paidAmount = bills.reduce((sum, bill) => {
    const paid = bill.participants.reduce(
      (participantSum, participant) =>
        participant.status === "paid"
          ? participantSum + (participant.amount ?? 0)
          : participantSum,
      0
    );
    return sum + paid;
  }, 0);

  const completionRate = totalAmount > 0 ? (paidAmount / totalAmount) * 100 : 0;

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª–≥–∏ –¥—Ä—É–∑–µ–π
  const friendsDebts = React.useMemo(() => {
    const debtsMap = new Map<
      string,
      { name: string; totalDebt: number; billsCount: number }
    >();

    bills.forEach(bill => {
      bill.participants.forEach(participant => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (participant.telegramUserId === user?.id?.toString()) {
          return;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–∏
        if (participant.paymentStatus === "paid") {
          return;
        }

        const amount =
          parseFloat(participant.shareAmount || "0") ||
          (participant.amount ?? 0);
        if (amount <= 0) return;

        const key = participant.telegramUsername || participant.name;
        const existing = debtsMap.get(key);

        if (existing) {
          existing.totalDebt += amount;
          existing.billsCount += 1;
        } else {
          debtsMap.set(key, {
            name: participant.name,
            totalDebt: amount,
            billsCount: 1,
          });
        }
      });
    });

    return Array.from(debtsMap.values()).sort(
      (a, b) => b.totalDebt - a.totalDebt
    );
  }, [bills, user?.id]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–ª–≥–∞—Ö –¥—Ä—É–≥–∞
  const loadFriendDebts = async (friendId: string) => {
    try {
      setIsLoadingFriendDebts(true);
      const response = await analyticsApi.getFriendDebtsAnalytics(friendId);
      if (response.data?.success) {
        setFriendDebtsData(response.data.data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤ –¥—Ä—É–≥–∞:", err);
    } finally {
      setIsLoadingFriendDebts(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –¥—Ä—É–≥–∞
  const handleFriendClick = async (friend: {
    name: string;
    telegramUsername?: string;
    totalDebt: number;
    billsCount: number;
  }) => {
    setSelectedFriend(friend);
    const friendId = friend.telegramUsername || friend.name;
    await loadFriendDebts(friendId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å—á–µ—Ç
  const handleBillClick = (billId: string) => {
    hapticFeedback?.impact("light");
    setSelectedFriend(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    navigate(`/bill/${billId}`);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const loadAnalytics = async () => {
      try {
        setIsLoading(true);
        setError(null);

        const response = await analyticsApi.getDebtsAnalytics();
        if (response.data?.success) {
          setAnalyticsData(response.data.data);
        } else {
          setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏");
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏");
      } finally {
        setIsLoading(false);
      }
    };

    loadAnalytics();
  }, []);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ fallback
  const stats = analyticsData?.stats || {
    totalBills: totalBills || 0,
    completedBills: completedBills || 0,
    activeBills: activeBills || 0,
    totalAmount: totalAmount || 0,
    paidAmount: paidAmount || 0,
    completionRate: completionRate || 0,
    remainingAmount: (totalAmount || 0) - (paidAmount || 0),
  };
  const serverFriendsDebts = analyticsData?.friendsDebts || [];
  const finalFriendsDebts =
    serverFriendsDebts.length > 0 ? serverFriendsDebts : friendsDebts;

  if (isLoading) {
    return (
      <div className="analytics-page">
        <div className="analytics-header">
          <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
        <div className="loading-state">
          <div className="loading-spinner">‚è≥</div>
          <p>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="analytics-page">
        <div className="analytics-header">
          <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
        </div>
        <div className="error-state">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p>{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="retry-button"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="analytics-page">
      <div className="analytics-header">
        <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
        <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤</p>
      </div>

      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">üìã</div>
          <div className="stat-content">
            <div className="stat-number">{stats.totalBills}</div>
            <div className="stat-label">–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤</div>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-content">
            <div className="stat-number">{stats.completedBills}</div>
            <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">‚è≥</div>
          <div className="stat-content">
            <div className="stat-number">{stats.activeBills}</div>
            <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">üí∞</div>
          <div className="stat-content">
            <div className="stat-number">
              {formatNumber(stats.completionRate, 1)}%
            </div>
            <div className="stat-label">–û–ø–ª–∞—á–µ–Ω–æ</div>
          </div>
        </div>
      </div>

      <div className="amount-summary">
        <div className="amount-item">
          <span className="amount-label">–û–±—â–∞—è —Å—É–º–º–∞:</span>
          <span className="amount-value">
            {formatNumber(stats.totalAmount)} USDT
          </span>
        </div>
        <div className="amount-item">
          <span className="amount-label">–û–ø–ª–∞—á–µ–Ω–æ:</span>
          <span className="amount-value paid">
            {formatNumber(stats.paidAmount)} USDT
          </span>
        </div>
        <div className="amount-item">
          <span className="amount-label">–û—Å—Ç–∞–ª–æ—Å—å:</span>
          <span className="amount-value pending">
            {formatNumber(stats.remainingAmount)} USDT
          </span>
        </div>
      </div>

      {finalFriendsDebts.length > 0 && (
        <div className="friends-debts-section">
          <h3>üí∏ –î–æ–ª–≥–∏ –¥—Ä—É–∑–µ–π</h3>
          <div className="debts-list">
            {finalFriendsDebts.map((friend, index) => (
              <div
                key={index}
                className="debt-item clickable"
                onClick={() => handleFriendClick(friend)}
              >
                <div className="debt-info">
                  <div className="debt-name">{friend.name}</div>
                  <div className="debt-details">
                    {friend.billsCount} —Å—á–µ—Ç
                    {friend.billsCount === 1
                      ? ""
                      : friend.billsCount < 5
                      ? "–∞"
                      : "–æ–≤"}
                  </div>
                </div>
                <div className="debt-amount">
                  {formatNumber(friend.totalDebt)} USDT
                </div>
                <div className="debt-arrow">‚Üí</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {bills.length === 0 && (
        <div className="empty-state">
          <div className="empty-icon">üìä</div>
          <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–æ–ª–≥–∞–º–∏ –¥—Ä—É–≥–∞ */}
      {selectedFriend && (
        <div className="modal-overlay" onClick={() => setSelectedFriend(null)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üí∏ –î–æ–ª–≥–∏ {selectedFriend.name}</h3>
              <button
                className="modal-close"
                onClick={() => setSelectedFriend(null)}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <div className="friend-summary">
                <div className="summary-item">
                  <span className="summary-label">–û–±—â–∏–π –¥–æ–ª–≥:</span>
                  <span className="summary-value">
                    {formatNumber(selectedFriend.totalDebt)} USDT
                  </span>
                </div>
                <div className="summary-item">
                  <span className="summary-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤:</span>
                  <span className="summary-value">
                    {selectedFriend.billsCount}
                  </span>
                </div>
              </div>

              {isLoadingFriendDebts ? (
                <div className="loading-state">
                  <div className="loading-spinner">‚è≥</div>
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</p>
                </div>
              ) : friendDebtsData?.debts ? (
                <div className="debts-details">
                  <h4>–î–µ—Ç–∞–ª–∏ –ø–æ —Å—á–µ—Ç–∞–º:</h4>
                  <div className="debts-list-detailed">
                    {friendDebtsData.debts.map((debt, index: number) => (
                      <div
                        key={index}
                        className="debt-detail-item clickable"
                        onClick={() => handleBillClick(debt.billId)}
                      >
                        <div className="debt-detail-info">
                          <div className="debt-detail-title">
                            {debt.billTitle}
                          </div>
                          <div className="debt-detail-status">
                            –°—Ç–∞—Ç—É—Å:{" "}
                            {debt.status === "active" ? "–ê–∫—Ç–∏–≤–Ω—ã–π" : "–ó–∞–≤–µ—Ä—à–µ–Ω"}
                          </div>
                          <div className="debt-detail-date">
                            –°–æ–∑–¥–∞–Ω:{" "}
                            {new Date(debt.createdAt).toLocaleDateString(
                              "ru-RU"
                            )}
                          </div>
                        </div>
                        <div className="debt-detail-amount">
                          {formatNumber(debt.amount)} {debt.currency}
                        </div>
                        <div className="debt-detail-arrow">‚Üí</div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="no-debts">
                  <p>–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–ª–≥–∞—Ö</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AnalyticsPage;
