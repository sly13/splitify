import React, { useState } from "react";
import { useTelegram } from "../hooks/useTelegram";
import { useToast } from "../hooks/useToast";

interface WalletConnectProps {
  onWalletConnected?: (address: string) => void;
  onCancel?: () => void;
  className?: string;
}

const WalletConnect: React.FC<WalletConnectProps> = ({
  onWalletConnected,
  onCancel,
  className = "",
}) => {
  const { hapticFeedback } = useTelegram();
  const { showSuccess, showError } = useToast();
  const [isConnecting, setIsConnecting] = useState(false);

  const handleConnectWallet = async () => {
    try {
      setIsConnecting(true);
      hapticFeedback.impact("medium");

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TON –∫–æ—à–µ–ª—å–∫—É
      // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
      const mockWalletAddress =
        "UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH0";

      showSuccess("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      onWalletConnected?.(mockWalletAddress);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", error);
      showError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞");
    } finally {
      setIsConnecting(false);
    }
  };

  return (
    <div className={`wallet-connect ${className}`}>
      <div className="wallet-connect-content">
        <div className="wallet-icon">üíé</div>
        <h3>–ü–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫</h3>
        <p>
          –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è
          –ø–ª–∞—Ç–µ–∂–µ–π
        </p>

        <div className="wallet-connect-actions">
          <button
            type="button"
            className="primary-button"
            onClick={handleConnectWallet}
            disabled={isConnecting}
          >
            {isConnecting ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." : "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"}
          </button>

          {onCancel && (
            <button
              type="button"
              className="secondary-button"
              onClick={onCancel}
              disabled={isConnecting}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default WalletConnect;
