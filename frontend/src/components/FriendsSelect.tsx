import React, { useState, useEffect } from "react";
import { useTelegram } from "../hooks/useTelegram";
import CustomSelect from "./CustomSelect";
import { friendsApi } from "../services/api";

interface Friend {
  id: string;
  name: string;
  telegramUsername?: string;
}

interface FriendsSelectProps {
  onSelect: (friend: Friend) => void;
  placeholder?: string;
  className?: string;
  disabled?: boolean;
  excludeParticipants?: Array<{
    telegramUsername?: string;
    telegramUserId?: string;
  }>;
  friends?: Friend[]; // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑–≤–Ω–µ
}

export const FriendsSelect: React.FC<FriendsSelectProps> = ({
  onSelect,
  placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞",
  className = "",
  disabled = false,
  excludeParticipants = [],
  friends: externalFriends,
}) => {
  const [friends, setFriends] = useState<Friend[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { hapticFeedback, user } = useTelegram();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
  useEffect(() => {
    if (externalFriends) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
      setFriends(externalFriends);
      setIsLoading(false);
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
      const loadFriends = async () => {
        try {
          setIsLoading(true);

          const response = await friendsApi.getFriends();
          setFriends(response.data.friends || []);
        } catch (error: any) {
          console.error("‚ùå FriendsSelect: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:", error);
          console.error(
            "‚ùå FriendsSelect: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
            error.response?.data || error.message
          );
        } finally {
          setIsLoading(false);
        }
      };

      loadFriends();
    }
  }, [externalFriends]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
  const allFriends = [...friends];
  if (
    user &&
    !friends.some(friend => friend.telegramUsername === user.username)
  ) {
    allFriends.unshift({
      id: `self_${user.id}`,
      name: `${user.first_name}${user.last_name ? ` ${user.last_name}` : ""}`,
      telegramUsername: user.username || undefined,
    });
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—Ä—É–∑–µ–π, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const availableFriends = allFriends.filter(friend => {
    if (!friend.telegramUsername) {
      return true; // –ï—Å–ª–∏ —É –¥—Ä—É–≥–∞ –Ω–µ—Ç username, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
    }

    const isExcluded = excludeParticipants.some(
      participant =>
        participant.telegramUsername === friend.telegramUsername ||
        (user &&
          participant.telegramUserId === user.id.toString() &&
          friend.telegramUsername === user.username)
    );

    return !isExcluded;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä—É–∑–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è CustomSelect
  const selectOptions = availableFriends.map(friend => ({
    value: friend.id,
    label: friend.name,
    icon: friend.id.startsWith("self_") ? "üëë" : "üë§", // –ö–æ—Ä–æ–Ω–∞ –¥–ª—è —Å–µ–±—è
    friend: friend, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–µ
  }));

  const handleSelect = (friendId: string) => {
    hapticFeedback.selection();
    const selectedFriend = allFriends.find(friend => friend.id === friendId);
    if (selectedFriend) {
      onSelect(selectedFriend);
    }
  };

  if (isLoading) {
    return (
      <div className={`friends-select loading ${className}`}>
        <div className="select-trigger">
          <div className="select-value">
            <span className="option-icon">‚è≥</span>
            <span className="option-label">–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–∑–µ–π...</span>
          </div>
        </div>
      </div>
    );
  }

  if (friends.length === 0) {
    return (
      <div className={`friends-select empty ${className}`}>
        <div className="select-trigger disabled">
          <div className="select-value">
            <span className="option-icon">üë•</span>
            <span className="option-label">–ù–µ—Ç –¥—Ä—É–∑–µ–π</span>
          </div>
        </div>
        <div className="empty-message">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ —Å–ø–∏—Å–∫–µ</p>
          <p style={{ fontSize: "12px", color: "#999", marginTop: "8px" }}>
            –î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞, –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            —Å—Ç–∞–Ω–µ—Ç –¥—Ä—É–≥–æ–º
          </p>
        </div>
      </div>
    );
  }

  if (availableFriends.length === 0) {
    return null; // –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä—É–∑–µ–π
  }

  return (
    <div className={`friends-select ${className}`}>
      <CustomSelect
        options={selectOptions}
        value=""
        onChange={handleSelect}
        placeholder={placeholder}
        disabled={disabled}
      />

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–µ */}
      <div className="friends-info">
        <div className="friends-count">
          üë• {availableFriends.length} –∏–∑ {allFriends.length}{" "}
          {availableFriends.length === 1
            ? "–¥—Ä—É–≥"
            : availableFriends.length < 5
            ? "–¥—Ä—É–≥–∞"
            : "–¥—Ä—É–∑–µ–π"}{" "}
          –¥–æ—Å—Ç—É–ø–Ω–æ
        </div>
      </div>
    </div>
  );
};

export default FriendsSelect;
