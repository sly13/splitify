import React, {
  createContext,
  useContext,
  useState,
  type ReactNode,
} from "react";
import { userApi, testApiConnection } from "../services/api";

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: any | null;
  authenticate: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState<any | null>(null);

  const authenticate = async () => {
    if (isAuthenticated || isLoading) {
      console.log(
        "üîê Authentication skipped - already authenticated or loading"
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram WebApp
    const hasTelegramWebApp = !!window.Telegram?.WebApp;
    const isProduction = !import.meta.env.DEV;

    if (isProduction && !hasTelegramWebApp) {
      console.log(
        "üöÄ Production mode without Telegram WebApp - checking URL params for user data"
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const urlParams = new URLSearchParams(window.location.search);
      const userId = urlParams.get("user_id");
      const username = urlParams.get("username");
      const firstName = urlParams.get("first_name");

      if (userId) {
        console.log("üöÄ Found user data in URL:", {
          userId,
          username,
          firstName,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        localStorage.setItem("user_id", userId);
        if (username) localStorage.setItem("username", username);
        if (firstName) localStorage.setItem("first_name", firstName);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUser({
          id: userId,
          firstName: firstName || "Unknown User",
          username: username || "unknown",
          telegramUserId: userId,
        });

        setIsAuthenticated(true);
        return;
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      console.error("‚ùå No user data found in URL parameters");
      setIsAuthenticated(false);
      return;
    }

    console.log("üîê Starting authentication process...");
    setIsLoading(true);
    try {
      console.log("üîê Authenticating user...");

      // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
      console.log("üß™ Testing API connection...");
      const apiAvailable = await testApiConnection();
      if (!apiAvailable) {
        console.error("‚ùå API is not available");
        setIsAuthenticated(true); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ API
        return;
      }

      console.log("‚úÖ API is available, proceeding with authentication...");
      // –í—ã–∑—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      const response = await userApi.getMe();

      if (response.data?.success) {
        console.log("‚úÖ User authenticated:", response.data.data);
        setUser(response.data.data);
        setIsAuthenticated(true);
      } else {
        console.error("‚ùå Authentication failed:", response.data);
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        setIsAuthenticated(true);
      }
    } catch (error) {
      console.error("‚ùå Authentication error:", error);
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log("‚ö†Ô∏è Continuing without authentication in production");
      setIsAuthenticated(true);
    } finally {
      console.log("üîê Authentication process completed");
      setIsLoading(false);
    }
  };

  const value: AuthContextType = {
    isAuthenticated,
    isLoading,
    user,
    authenticate,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
