import { type FC, useEffect, useCallback } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  useNavigate,
} from "react-router-dom";
import { TonConnectUIProvider } from "@tonconnect/ui-react";
import { useTelegram } from "./hooks/useTelegram";
import { useAppStore } from "./stores/appStore";
import { useTheme } from "./hooks/useTheme";
import { AuthProvider, useAuth } from "./contexts/AuthContext";
import { userApi } from "./services/api";
import Layout from "./components/Layout";
import OnboardingPage from "./components/OnboardingPage";
import MainApp from "./components/MainApp";
import CreateBillPage from "./components/CreateBillPage";
import BillViewPage from "./components/BillViewPage";
import SuccessPage from "./components/SuccessPage";
import ErrorPage from "./components/ErrorPage";
import "./App.css";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ startapp
const StartAppHandler: FC = () => {
  const navigate = useNavigate();
  const { webApp } = useTelegram();

  const handleStartApp = useCallback(
    async (billId: string) => {
      try {
        console.log("üîó Processing startapp for bill:", billId);

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await userApi.getMe();

        // –ó–∞—Ç–µ–º –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—á–µ—Ç—É
        const response = await fetch(`/api/bills/${billId}/join`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          console.log("‚úÖ Successfully joined bill:", billId);
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—á–µ—Ç–∞
          navigate(`/bill/${billId}`);
        } else {
          console.error("‚ùå Failed to join bill:", response.status);
          // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—á–µ—Ç–∞
          navigate(`/bill/${billId}`);
        }
      } catch (error) {
        console.error("‚ùå Error processing startapp:", error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—á–µ—Ç–∞
        navigate(`/bill/${billId}`);
      }
    },
    [navigate]
  );

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp –∏–∑ Telegram WebApp
    const startParam = (webApp?.initDataUnsafe as { start_param?: string })
      ?.start_param;
    if (startParam) {
      const billId = startParam.replace("bill_", ""); // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'bill_'
      console.log("StartApp parameter found:", billId);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å—á–µ—Ç—É
      handleStartApp(billId);
    }
  }, [webApp, navigate, handleStartApp]);

  return null;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const AuthInitializer: FC = () => {
  const { isReady } = useTelegram();
  const { isAuthenticated, isLoading, authenticate } = useAuth();

  useEffect(() => {
    if (isReady && !isAuthenticated && !isLoading) {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –∂–¥–µ–º Telegram WebApp
      const isProduction = !import.meta.env.DEV;
      const hasTelegramWebApp = window.Telegram?.WebApp;

      if (isProduction && !hasTelegramWebApp) {
        console.log(
          "üöÄ Production mode without Telegram WebApp - skipping authentication"
        );
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ Telegram WebApp –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        return;
      }

      authenticate().catch(error => {
        console.error("Failed to authenticate:", error);
      });
    }
  }, [isReady, isAuthenticated, isLoading, authenticate]);

  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ Telegram WebApp –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  const isProduction = !import.meta.env.DEV;
  const hasTelegramWebApp = window.Telegram?.WebApp;

  if (isProduction && !hasTelegramWebApp) {
    return <AppContent />;
  }

  if (!isReady || isLoading) {
    return (
      <div className="loading-screen">
        <div className="spinner"></div>
        <p>{!isReady ? "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." : "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è..."}</p>
      </div>
    );
  }

  return <AppContent />;
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppContent: FC = () => {
  const { hasSeenOnboarding } = useAppStore();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
  useTheme();

  return (
    <Router>
      <StartAppHandler />
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route
            index
            element={hasSeenOnboarding ? <MainApp /> : <OnboardingPage />}
          />
          <Route path="home" element={<MainApp />} />
          <Route path="create" element={<CreateBillPage />} />
          <Route path="bill/:id" element={<BillViewPage />} />
          <Route path="success" element={<SuccessPage />} />
          <Route path="error" element={<ErrorPage />} />
        </Route>
      </Routes>
    </Router>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App: FC = () => {
  const manifestUrl = import.meta.env.DEV
    ? "http://localhost:4040/tonconnect-manifest.json"
    : "https://splitify.vadimsemenko.ru/tonconnect-manifest.json";

  return (
    <TonConnectUIProvider manifestUrl={manifestUrl}>
      <AuthProvider>
        <AuthInitializer />
      </AuthProvider>
    </TonConnectUIProvider>
  );
};

export default App;
